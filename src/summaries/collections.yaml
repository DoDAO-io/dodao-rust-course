- title: Introduction
  shortTitle: Introduction
  key: introduction
  summary: Collections are useful data structure in Rust that can contain multiple values.
  details: |
    - Collections can contain multiple values
    - Collections are stored on Heap and are dynamically sized, their size is not required to be known at compile time
    - Rust collections can be grouped into 4 major categories:
      * Sequences - Vec, VecDeque, LinkedList
      * Maps - HashMap, BTreeMap
      * sets: HashSet, BTreeSet
      * Misc: BinaryHeap
    - 3 of most common collections are:
      * Vector
      * String
      * HashMap

- title: Vector
  shortTitle: Vector
  key: vector
  summary: Vector allow to store more than 1 value in single data structure.
  details: |
    - Vector has multiple items of same time stored next to each other in memory.
    - Creating a vector
      * creating an empty vector
        ```
        let v: Vec<i32> = Vec::new();
        ```
      * creating vector using vec! macro
        ```
        let v = vec![1, 2, 3];
        ```
    - Adding a value of a vector
      * Value can be added to vector using method `push`
        ```
        let mut v = Vec::new();

        v.push(10);
        v.push(20);
        v.push(30);
        ```
    - Reading elements of a vector
      * There are 2 ways to read elements in vector - indexing, using get method
      * Indexing
        ```
        let v = Vec![1,2,3,4,5];
        let third = &v[2];

        println!(“The third element is {}”, third);

        ```
      * Using get method
        ```
        let v = Vec![1,2,3,4,5];
        let third = v.get(2);

        println!(“The third element is {}”, third);
        ```
      * If user access a value outside the vector, if using indexing it will panic, if `get` method it will return None.
      * According to borrow checker rule, if there is a reference created to an element in the vector, vector can not be modified.
    - Iterating over vector
      * For loop can be used to iterate over vector
        ```
        let v = Vec![1,2,3,4,5];
        for i in &v {
            println!(“{}”, i);
        }
        ```
      * To mutate a vector while iterating
        ```
        let mut v = Vec![1,2,3,4,5];
        for i in &mut v {
            *i += 50;
            println!(“{}”, i);
        }
        ```
    - Useful method in vector
      * len `vec.len()`: gives length of the vector
      * capacity `vec.capacity()`: gives total capacity of the vector in bytes
      * contains `vec.contains(v)`: check if a vector contains the element
      * remove `vec.remove(index)`: remove an element from specified index in the vector
      * pop `vec.pop()`: remove an element from end of the vector
      * push `vec.push(v)`: adds an element to the end of the vector
