
- uuid: 0111a385-b650-4db6-a8ae-434b6d26c36e
  type: SingleChoice
  content: |
    ________ is a method that allows you to, instead of handling possible errors inside the current function you're writing, to pass the error up to the caller of this function and handle the error there.
  hint: "Error handling"
  explanation: "it returns a Return to whoever is calling the function to handle it."
  answerKeys:
    - D
  topic: Error_handling
  subTopics:
    - Errors
  difficultyLevel: Low
  choices:
   
   - content: "Unwrap and Expect"
      key: A
      order: 0
    - content: "Result<T,E>"
      key: B
      order: 1
    - content: "Panic!"
      key: C
      order: 2
    - content: "Error Propagating"
      key: D
      order: 3
      
- uuid: 9dfe3dbe-2f14-4541-8b8f-78441eaa904c
  type: SingleChoice
  content: |
    If the error is of the unrecoverable nature, the _____ macro is executed
  hint: "Error handling"
  explanation: "prints an error message to the screen then unwinds"
  answerKeys:
    - C
  topic: Error_handling
  subTopics:
    - Errors
  difficultyLevel: Low
  choices:
   
   - content: "Not to panic"
      key: A
      order: 0
    - content: "Result<T,E>"
      key: B
      order: 1
    - content: "Panic!"
      key: C
      order: 2
    - content: "Error P?"
      key: D
      order: 3
      
- uuid: 35fe5c1c-58a1-4921-9ff2-ea5ca4c21708
  type: SingleChoice
  content: |
    Rust splits errors into 2 categories, Recoverable errors and
    
  hint: "Error handling"
  explanation: "type of errors"
  answerKeys:
    - B
  topic:
  subTopics: Error_handling
    - Errors
  difficultyLevel: Low
  choices:
   
   - content: "Not important errors"
      key: A
      order: 0
    - content: "Non-Recoverable errors"
      key: B
      order: 1
    - content: "Immediate errors"
      key: C
      order: 2
    - content: "Data Errors"
      key: D
      order: 3
      
- uuid: 4808c0d4-0ed4-4dcd-aa26-78d3b57063f3
  type: SingleChoice
  content: |
     Errors cannot be handled with
  hint: "its an output keyword"
  explanation: "println is to print out"
  answerKeys:
    - A
  topic: Error_handling
  subTopics:
    - Error
  difficultyLevel: Low
  choices:
   
   - content: "println()"
      key: A
      order: 0
    - content: "Panic!"
      key: B
      order: 1
    - content: "enum Result <T,E>"
      key: C
      order: 2
    - content: "Propagating"
      key: D
      order: 3

- uuid: 372ec2d3-b8cb-48a2-b9a2-e15628cc89b6
  type: SingleChoice
  content: |
     An 'if' expression is a ________ branch in program control.
  hint: "if statement"
  explanation: "A statement that gets checked"
  answerKeys:
    - C
  topic: Control_flow
  subTopics: 
    - If else
  difficultyLevel: Low
  choices:
   
   - content: "Match"
      key: A
      order: 0
    - content: "Method"
      key: B
      order: 1
    - content: "Condition"
      key: C
      order: 2
    - content: "Office"
      key: D
      order: 3

- uuid: a48ba4aa-ea0f-4e7e-b040-95d720ea2d72
  type: SingleChoice
  content: |
     The condition operands must have the _______ type.
  hint: "A data type"
  explanation: "The condition must be 0 or 1"
  answerKeys:
    - B
  topic: control_flow
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "String"
      key: A
      order: 0
    - content: "Boolean"
      key: B
      order: 1
    - content: "Integer"
      key: C
      order: 2
    - content: "Float"
      key: D
      order: 3

- uuid: 8600c9e3-5095-441d-856f-a36e9efcc278
  type: SingleChoice
  content: |
        What is the output?
        ```rust
            fn main() {
               let number = 8;

               if number < 9 {
                  println!("condition was true");
                } else {
                 println!("condition was false");
                 }
                }
          ```
     
  hint: "If else"
  explanation: "The condition of 8 being lesser than 9 is correct"
  answerKeys:
    - D
  topic: control_flow
  subTopics:
    - if else
  difficultyLevel: Low
  choices:
   
   - content: "condition was false"
      key: A
      order: 0
    - content: "number = 8"
      key: B
      order: 1
    - content: "Throws error"
      key: C
      order: 2
    - content: "condition was true"
      key: D
      order: 3

- uuid: 6f2dcef1-b20b-4e02-b2bd-ee0f03ef298d
  type: SingleChoice
  content: |
     What will be the output if we run this code section?
     ```rust
     fn main() {
       let number = 3;

       if number {
          println!("number was three");
      }
    }
   ```
  hint: "Data type"
  explanation: "should be a condition"
  answerKeys:
    - C
  topic: control_flow
  subTopics: 
    - if_else
  difficultyLevel: Low
  choices: 
   
   - content: "3"
      key: A
      order: 0
    - content: "True"
      key: B
      order: 1
    - content: "error[E0308]: mismatched types"
      key: C
      order: 2
    - content: "number is 3"
      key: D
      order: 3

- uuid: 061c992d-0a9f-4283-b82c-ef340ad4b566
  type: SingleChoice
  content: |
      What is the output?
      ```rust
      fn main() {
         let digit = 34;
          if digit != 0 {
         println!("number was something other than zero");
       }
      }
      ```
  hint: "Take note of the !="
  explanation: "!= is like an exception statement"
  answerKeys:
    - D
  topic:
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Mismatched type"
      key: A
      order: 0
    - content: "digit error"
      key: B
      order: 1
    - content: "False"
      key: C
      order: 2
    - content: "number was something other than zero"
      key: D
      order: 3

- uuid: bb41cdea-73a2-491c-ae08-70002ac30fa2
  type: SingleChoice
  content: |
     ____ often useful to execute a block of code more than once.
  hint: "iteration"
  explanation: "more than one execution"
  answerKeys:
    - A
  topic: control_flow
  subTopics:
    - loop
  difficultyLevel: Low
  choices:
   
   - content: "Loop"
      key: A
      order: 0
    - content: "Function"
      key: B
      order: 1
    - content: "Result"
      key: C
      order: 2
    - content: "Print"
      key: D
      order: 3

- uuid: 7621c8d3-0d2d-4237-921d-988824ef2736
  type: SingleChoice
  content: |
     The loop keyword tells Rust to execute a block of code over until you explicitly tell it to stop.
      What happens if you don't tell it to stop?
  hint: "Looping out"
  explanation: "loop are forever"
  answerKeys:
    - C
  topic: contol_flow
  subTopics:
    - Loop
  difficultyLevel: Low
  choices:
   
   - content: "it stop by itself"
      key: A
      order: 0
    - content: "It slow down"
      key: B
      order: 1
    - content: "It loops forever"
      key: C
      order: 2
    - content: " ask you to stop it"
      key: D
      order: 3

- uuid: 23291951-39c9-4dcf-9788-ce9dff03bed4
  type: SingleChoice
  content: |
     What will happen if we run this code?
     ```rust
     fn main() {
        loop {
         println!("again!");
      }
    } 
    ```

    
  hint: "Looping"
  explanation: "it just loop forever"
  answerKeys:
    - A
  topic: loop
  subTopics:
    - Loop statement
  difficultyLevel: Low
  choices:
   
   - content: "It prints again forever till you kill the terminal"
      key: A
      order: 0
    - content: "it stops after 100 times"
      key: B
      order: 1
    - content: "Error: couldn't run: no end"
      key: C
      order: 2
    - content: "It end immediately"
      key: D
      order: 3

- uuid: 2fc1b82f-e876-4a3f-a6e2-68798ce7888c
  type: SingleChoice
  content: |
     What is the value of result?
    ```rust
       fn main() {
         let mut counter = 0;

         let result = loop {
           counter += 1;

           if counter == 10 {
            break counter * 3;
         }
       };

         println!("The result is {result}");
      }
   ```
    
  hint: " watch the declaration of result"
  explanation: ""
  answerKeys:
    - C
  topic: contol_flow
  subTopics:
    - if-let
  difficultyLevel: Low
  choices:
   
   - content: "100"
      key: A
      order: 0
    - content: "20"
      key: B
      order: 1
    - content: "30"
      key: C
      order: 2
    - content: "40"
      key: D
      order: 3

- uuid: 8f76e7b0-db4c-492e-8726-cd2cbd1a18c7
  type: SingleChoice
  content: |
     A program will often need to evaluate a condition within a loop. What keywords is best at checking the condition?
  hint: "breaking loop"
  explanation: ""
  answerKeys:
    - A
  topic: control_flow
  subTopics:
    - For and while loop
  difficultyLevel: Low
  choices:
   
   - content: "For and While"
      key: A
      order: 0
    - content: "If and Panic"
      key: B
      order: 1
    - content: "panic and println"
      key: C
      order: 2
    - content: "for and if"
      key: D
      order: 3

- uuid: 97e6a555-4053-432b-ba11-ec6eff3aa491
  type: SingleChoice
  content: |
      What is the output of this?
      ```rust
        fn main() {
        let mut number = 3;
         while number != 0 {
         println!("{number}!");

          number -= 1;
        }

       println!("LIFTOFF!!!");
      }
    ```
  hint: "Loop while number is not zero yet"
  explanation: "we looped from 3 down 0 and broke out"
  answerKeys:
    - A
  topic: control_flow
  subTopics:
    - While-loop
  difficultyLevel: Low
  choices:
   
   - content: "3! 2! 1! LIFTOFF!!!"
      key: A
      order: 0
    - content: "1! 2! LIFTOFF!!!"
      key: B
      order: 1
    - content: "error"
      key: C
      order: 2
    - content: "LIFTOFF!!!"
      key: D
      order: 3

- uuid: 531159db-111c-423b-9acd-5a6586febccf
  type: SingleChoice
  content: |
      Complete the sentence.
     The safety and conciseness of _____ make them the most commonly used loop construct in Rust.
  hint: "A loop statement"
  explanation: ""
  answerKeys:
    - C
  topic: contol__flow
  subTopics:
    - For-loop
  difficultyLevel: Low
  choices:
   
   - content: "While loop"
      key: A
      order: 0
    - content: "If-else"
      key: B
      order: 1
    - content: "For loop"
      key: C
      order: 2
    - content: "While for"
      key: D
      order: 3

- uuid: 7f76a44b-5a88-4823-80f9-26ea8bd266f6
  type: SingleChoice
  content: |
     The ____ function(most important function), which is the entry point of many programs.
  hint: "Function"
  explanation: "it is the functions of all fuunction"
  answerKeys:
    - D
  topic: function
  subTopics:
    - function
  difficultyLevel: Low
  choices:
   
   - content: "Branch"
      key: A
      order: 0
    - content: "Sub"
      key: B
      order: 1
    - content: "VIP"
      key: C
      order: 2
    - content: "main"
      key: D
      order: 3

- uuid: 1ff53709-57e9-4560-9406-89a3e3f01a9c
  type: SingleChoice
  content: |
     Rust code uses snake case as the conventional style for _______ and variable names
  hint: "Function naming convention"
  explanation: "letters are lowercase and underscores separate words"
  answerKeys:
    - B
  topic: function
  subTopics:
    - function names
  difficultyLevel: Low
  choices:
   
   - content: "Parameter"
      key: A
      order: 0
    - content: "Function"
      key: B
      order: 1
    - content: "File"
      key: C
      order: 2
    - content: "Object"
      key: D
      order: 3

- uuid: 9a777f39-db37-4840-9286-14fbc43a4385
  type: SingleChoice
  content: |
     We define a function in Rust by entering ____ followed by a function name and a set of parentheses.
  hint: "Declaring a function"
  explanation: "Thats the Rust keyword"
  answerKeys:
    - C
  topic: function
  subTopics:
    - function
  difficultyLevel: Low
  choices:
   
   - content: "Sn"
      key: A
      order: 0
    - content: "func"
      key: B
      order: 1
    - content: "fn"
      key: C
      order: 2
    - content: "function"
      key: D
      order: 3

- uuid: 49b77d7b-8230-4d9d-ac53-6eea65859b37
  type: SingleChoice
  content: |
     What is the output?
     ```rust
      fn main() {
         println!("Hello, my name is John.");

         another_function();
       }

      fn another_function() {
      println!("Another function.");
    }
    ```
  hint: "Function calling"
  explanation: "You call function in the main for this example"
  answerKeys:
    - A
  topic: function
  subTopics:
    - function
  difficultyLevel: Low
  choices:
   
   - content: "Hello, my name is John. Another function"
      key: A
      order: 0
    - content: "Another function"
      key: B
      order: 1
    - content: "Hello, my name is John."
      key: C
      order: 2
    - content: " Another function Hello, my name is John."
      key: D
      order: 3

- uuid: b4d11d66-dcd6-4e7e-aa09-8e2d40d1763d
  type: SingleChoice
  content: |
     The ___ brackets tell the compiler where the function body begins and ends.
  hint: "function delaration"
  explanation: "Declaring every function in a block"
  answerKeys:
    - A
  topic: function
  subTopics:
    - function
  difficultyLevel: Low
  choices:
   
   - content: "Curly"
      key: A
      order: 0
    - content: "Square"
      key: B
      order: 1
    - content: "Angle"
      key: C
      order: 2
    - content: "Parentheses"
      key: D
      order: 3

- uuid: 66b285ee-16ea-4dc5-9ebf-a71b2f8115b4
  type: SingleChoice
  content: |
      What is the output?
     ```
      fn main() {
          let x = 7;

          if x == 5 {
           println!("x is five!");
          } else if x == 6 {
           println!("x is six!");
          } else {
           println!("x is not five or six :(");
          }
        }
       ```
  hint: "Nested if-else statement"
  explanation: "Find the correct condition"
  answerKeys:
    - B
  topic: if_statement
  subTopics:
    - nested if else statement
  difficultyLevel: Low
  choices:
   
   - content: "x is five!"
      key: A
      order: 0
    - content: "x is not five or six :("
      key: B
      order: 1
    - content: "x is six!"
      key: C
      order: 2
    - content: "x is seven!"
      key: D
      order: 3

- uuid: 23c0f874-10dc-4e32-bd16-fe17a9a5fbad
  type: SingleChoice
  content: |
     The ____ operator can only be used in functions whose return type is compatible with the value the ? is used on
  hint: "error handling operator"
  explanation: "if it is not compatiable it would not work"
  answerKeys:
    - A
  topic: error_handling
  subTopics:
    - Operator
  difficultyLevel: Low
  choices:
   
   - content: "?"
      key: A
      order: 0
    - content: "::"
      key: B
      order: 1
    - content: "<T,E>"
      key: C
      order: 2
    - content: "//"
      key: D
      order: 3

- uuid: 5b135105-a416-42f5-965b-76fb9fce5852
  type: SingleChoice
  content: |
      What will happen if we run this code?
      ```rust
        fn main() {
           panic!("crash and burn");
        }
       ```

  hint: "Panic first"
  explanation: "it is not a print function"
  answerKeys:
    - C
  topic: error_handling
  subTopics:
    - Panic
  difficultyLevel: Low
  choices:
   
   - content: "timeout error"
      key: A
      order: 0
    - content: "fails to compile"
      key: B
      order: 1
    - content: "it panic at crash and burn"
      key: C
      order: 2
    - content: "print out crash and burn"
      key: D
      order: 3

- uuid: 084c634a-f438-4ff0-a906-b554018ef18d
  type: SingleChoice
  content: |
     What is a Statement?
  hint: "Statement"
  explanation: "instructions only, doesn't do any other thing"
  answerKeys:
    - A
  topic: function
  subTopics:
    - statements
  difficultyLevel: Low
  choices:
   
   - content: "Statements are instructions that perform some action and do not return a value"
      key: A
      order: 0
    - content: "Statement are a library function"
      key: B
      order: 1
    - content: "statements are the core of a program"
      key: C
      order: 2
    - content: "Statements are instructions that perform some action and return a value""
      key: D
      order: 3

- uuid: c5df8ee5-f8ed-439b-ab10-605e6b394661
  type: SingleChoice
  content: |
      Complete the sentence
     Function bodies are made up of a series of ______ optionally ending in an ______
  hint: "function body"
  explanation: "They make up a function"
  answerKeys:
    - B
  topic: function
  subTopics: body of a function
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Statement and methods"
      key: A
      order: 0
    - content: "Statement and expression"
      key: B
      order: 1
    - content: "Expression and methods"
      key: C
      order: 2
    - content: "Expression and Statement"
      key: D
      order: 3


- uuid: 93d9080c-f484-43ac-ba71-3670a2500a7f
  type: SingleChoice
  content: |
     What part of your code can be evaluate to a resulting value.
  hint: "Function body"
  explanation: " They are calculated "
  answerKeys:
    - C
  topic: function
  subTopics:
    - funcrion body
  difficultyLevel: Low
  choices:
   
   - content: "Statement"
      key: A
      order: 0
    - content: "Function"
      key: B
      order: 1
    - content: "Expression"
      key: C
      order: 2
    - content: "Methods"
      key: D
      order: 3

- uuid: 6b5885d2-91cc-4979-b731-7c1a2e9a907a
  type: SingleChoice
  content: |
     What fragment of code is an expression here?
     ```rust
     fn main() {
       let y = {
          let x = 3;
          x + 1
      };

      println!("The value of y is: {y}");
    }
    ```

  hint: "not a statement"
  explanation: "it should be a computation"
  answerKeys:
    - A
  topic: function 
  subTopics: 
    - function body
  difficultyLevel: Low
  choices:
   
   - content: | "{
                let x = 3;
                 x + 1
                 }"
      key: A
      order: 0
    - content: "let x = 3"
      key: B
      order: 1
    - content: "println!("The value of y is: {y}");"
      key: C
      order: 2
    - content: "fn main() "
      key: D
      order: 3
      
- uuid: f24f175d-7a12-45b8-8f95-b85f6381540e
  type: SingleChoice
  content: |
     Which is not a control flow method?
  hint: "which can be use for iteration"
  explanation: "the odd one is use for error handling"
  answerKeys:
    - D
  topic: control_flow
  subTopics:
    - flow methos
  difficultyLevel: Low
  choices:
   
   - content: "for-loop"
      key: A
      order: 0
    - content: "if-else"
      key: B
      order: 1
    - content: "while-loop"
      key: C
      order: 2
    - content: "panic!"
      key: D
      order: 3
      
- uuid: d18f8f03-0600-46b5-9fc3-70aecb555379
  type: SingleChoice
  content: |
     Can a loop be inside a loop?
  hint: "Nested loops"
  explanation: "you can break and continue with loops"
  answerKeys:
    - C
  topic:
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "only when you use the Panic! method"
      key: A
      order: 0
    - content: "No"
      key: B
      order: 1
    - content: "Yes, we break and can continue"
      key: C
      order: 2
    - content: "Loop are statement"
      key: D
      order: 3
      
- uuid: d8e164a6-a3ee-4dd6-a07f-4381fdb5b8c0
  type: SingleChoice
  content: |
     Functions can return _____ to the code that calls them
  hint: "returns something important"
  explanation: "functions have to be called"
  answerKeys:
    - A
  topic: function
  subTopics:
    - function
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: "function"
      key: B
      order: 1
    - content: "statement"
      key: C
      order: 2
    - content: "numbers"
      key: D
      order: 3
      
- uuid: 95077da8-24ad-4ddf-bc75-9a0387349f62
  type: SingleChoice
  content: |
     Take a look at this little complex code, what best decribe the output?
     ```rust
          fn main() {
            // `n` will take the values: 1, 2, ..., 100 in each iteration
             for n in 1..101 {
               if n % 15 == 0 {
               println!("fizzbuzz");
               } else if n % 3 == 0 {
               println!("fizz");
               } else if n % 5 == 0 {
               println!("buzz");
               } else {
               println!("{}", n);
               }
            }
          }
        ```

  hint: "division without reminder"
  explanation: "from 1 to 101, if the remainder matches a condition it prints its output"
  answerKeys:
    - C
  topic:
  subTopics:
    - 
  difficultyLevel: Medium
  choices:
   
   - content: "it fails completely"
      key: A
      order: 0
    - content: "it prints from 1 to 101"
      key: B
      order: 1
    - content: "It moves from 1 to 101, and test each number against the condition and prints out the first condition output it matches"
      key: C
      order: 2
    - content: "The code ends because nested if statement needs break command"
      key: D
      order: 3

- uuid: aabc6ca8-307d-4b5e-bbc2-ac8e46a8fb83
  type: SingleChoice
  content: |
     What is the output?
     fn main() {

	    let strn = "DoDAOCourse";
	    let fixed_string = "DDC";


	    if fixed_string==strn {
		    println!("Same");
	    }else{
	    	println!("Not Same");
      	}
      }

  hint: " Data comparision"
  explanation: "We use if and let statement to compare the strings"
  answerKeys:
    - B
  topic:
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Same"
      key: A
      order: 0
    - content: "Not Same"
      key: B
      order: 1
    - content: "Error: let is not a keyword"
      key: C
      order: 2
    - content: "DoDAOCourse"
      key: D
      order: 3

- uuid: 2a9e9798-a646-4021-8469-6f889ced1e08
  type: SingleChoice
  content: |
    What is the output?
    ```rust
     fn main() {

	    let n = 7;

	      if n>10 {
	    	println!("Greater than 10");
	        }else{
	  	println!("Smaller than 10");
	    }
    }
    ```
     
  hint: "greater than or less than"
  explanation: " its simple enough"
  answerKeys:
    - A
  topic: control_flow
  subTopics:
    - If_else statement
  difficultyLevel: Low
  choices:
   
   - content: "Smaller than 10"
      key: A
      order: 0
    - content: "Smaller than 7"
      key: B
      order: 1
    - content: "Greater than 10"
      key: C
      order: 2
    - content: "Greater than 7"
      key: D
      order: 3
      
- uuid: f0cf97a2-753e-4ec3-8648-3a8205582580
  type: SingleChoice
  content: |
     What is the output?
     ```rust
       fn main() {

     	let n = 9;

	    if n>10 {
	    	println!("Greater than 10");
	      }else if n==10 {
	      println!("Equal to 10");
	      }else {
		    println!("Smaller than 10");
	       }
     }
    ```

  hint: "Find the conditions that matches"
  explanation: "Iterate and find the mathematical solution"
  answerKeys:
    - D
  topic: contol_flow
  subTopics:
    - Nested else statement
  difficultyLevel: Low
  choices:
   
   - content: "Equal to 10"
      key: A
      order: 0
    - content: "Greater than 10"
      key: B
      order: 1
    - content: "Greater than 9"
      key: C
      order: 2
    - content: "Smaller than 10"
      key: D
      order: 3
      
- uuid: f309a64f-591d-4b23-8c86-d5947fc5254b
  type: SingleChoice
  content: |
     What is the output?
     ```rust
       use std::fs::File;

        fn main() {
        	let f = File::open("gfg.txt");
        println!("{:?}",f);
        }
      ```

  hint: "Result error method"
  explanation: "file gfg.txt was not there"
  answerKeys:
    - A
  topic: Error_handling
  subTopics:
    - Recoverable errors
  difficultyLevel: Low
  choices:
   
   - content: "Err(Os { code: 2, kind: NotFound, message: 'No such file or directory' })"
      key: A
      order: 0
    - content: "thread 'main' panicked at 'index out of bounds:"
      key: B
      order: 1
    - content: "Null error"
      key: C
      order: 2
    - content: "File has been opened"
      key: D
      order: 3

- uuid: be2c74c0-de24-4808-8db7-25335f97e5de
  type: SingleChoice
  content: |
     What is the expected output?
     ```rust
      use std::fs::File;
      fn main() {
      // file doesn't exist
      let f = File::open("gfg.txt");/
      match f {
      	Ok(file)=> {
	  	println!("file found {:?}",file);
      	},
    	Err(_error)=> {
		
		  // replace it with whatever you want
	  	// to do if file is not found
	  	println!("file not found \n");
	    }
    }
    }
   ```

  hint: "Result error when missing an item"
  explanation: "matches the return type of the result"
  answerKeys:
    - B
  topic: 
  subTopics:
    - 
  difficultyLevel: Medium
  choices:
   
   - content: "file found "
      key: A
      order: 0
    - content: "file not found "
      key: B
      order: 1
    - content: "Err(Os { code: 2, kind: NotFound, message: 'No such file or directory' })"
      key: C
      order: 2
    - content: "Opened file"
      key: D
      order: 3
      
- uuid: 8b82af20-1400-404d-9012-8561ebb6be27
  type: SingleChoice
  content: |
     What is the output of this code?
     ```rust
     fn main(){
      let result = eligible(13);
      match result {
      	Ok(age)=>{
	    	println!("Person eligible to vote with age={}",age);
	      },
	   Err(msg)=>{
	  	println!("{}",msg);
	    }
    }
   }
   fn eligible(age:i32)->Result<i32,String> {
    if age>=18 {
    	return Ok(age);
        } else {
	    return Err("Not Eligible..Wait for some years".to_string());
      }
    }
   ```

  hint: "Compare the age give to the required voting age"
  explanation: "to produce an error if a person below 18 years tries to apply for voter ID"
  answerKeys:
    - A
  topic: error_handling
  subTopics:
    - Recoverable error
  difficultyLevel: Hard
  choices:
   
   - content: "Not Eligible..Wait for some years"
      key: A
      order: 0
    - content: "Person eligible to vote with 13 years"
      key: B
      order: 1
    - content: "Error: Panicked at Err"
      key: C
      order: 2
    - content: "Failed to compile"
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3

- uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3
 
 - uuid:
  type: SingleChoice
  content: |
     
  hint: ""
  explanation: ""
  answerKeys:
    - A
  topic: 
  subTopics:
    - 
  difficultyLevel: Low
  choices:
   
   - content: "Values"
      key: A
      order: 0
    - content: ""
      key: B
      order: 1
    - content: ""
      key: C
      order: 2
    - content: ""
      key: D
      order: 3
