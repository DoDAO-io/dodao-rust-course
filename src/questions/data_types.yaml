- uuid: ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1
  type: SingleChoice
  content: |
    What is the output of the following code snippet:
     
        ``` 
            fn main() {
              let x = 12;
              println!("The value of x is: {x}");
              x = 8;
              println!("The value of x is: {x}");
            } 
        ```
    
  hint: NoHint
  explanation: "Error would occur, because the variable x isn't set as mutable so it's value can't be changed."
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - "variables"
  difficultyLevel: Low
  choices:
    - content: "The value of x is: 8"

      key: A
      order: 0
    - content: "Error: the variable x is mutable"
      key: B
      order: 1
    - content: "The value of x is: 12"
      key: C
      order: 2
    - content: "Error: the variable x is immutable"
      key: D
      order: 3

- uuid: 23a0e9e5-6c47-4512-98a5-4cd3ab6eff25
  type: SingleChoice
  content: Space taken by a Character data type in rust is
  hint: "It doesn't use ASCII values"
  explanation: "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII."
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: 1 byte

      key: A
      order: 0
    - content: 4 bytes
      key: B
      order: 1
    - content: 8 bytes
      key: C
      order: 2
    - content: 16 bytes
      key: D
      order: 3

- uuid: 39385b22-7604-492f-9c2e-aaae409c6b79
  type: SingleChoice
  content: Rust is a Dynamically typed language.
  hint: Does the compiler need to know the data type at compile time?
  explanation: It is statically typed
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "True"

      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3

- uuid: 6b844c24-f769-4662-a591-83c0a5f8c6c3
  type: SingleChoice
  content: Select the incorrect declaration statement
  hint: NoHint
  explanation: It is declared as an unsigned integer, but the value is negative
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "let mut x: u32 = 20;"
      key: A
      order: 0
    - content: "let mut x: i32 = -20;"
      key: B
      order: 1
    - content: "let mut x: u32 = -20;"
      key: C
      order: 2
    - content: "let mut x = 20;"
      key: D
      order: 3


- uuid: 6f2cb4ae-db4d-4c04-bfd4-37669695dab0
  type: MultipleChoice
  content: Suppose you declared a variable as u8 and then assigned it a value of "257". What would be the output if it’s compiled with a "`“--release” flag?`"
  hint: NoHint
  explanation: After 255 the digits start rolling back to 0, 1 and so on
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - bit manupilation
  difficultyLevel: High
  choices:
    - content: "257"
      key: A
      order: 0
    - content: "Error: Integer Overflow"
      key: B
      order: 1
    - content: "0"
      key: C
      order: 2
    - content: "1"
      key: D
      order: 3

- uuid: 0708f185-46b5-45ee-ac47-3e7e1ca611b3
  type: MultipleChoice
  content: |
    Are Tuples in rust dynamic in nature?
    "Eg:-" 
    ``` 
      let tup: (i32, f64, bool) = (500, 6.4, true); 
    ```
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "Yes"
      key: A
      order: 0
    - content: "No"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3

- uuid: d11a531f-f32f-4764-a60a-2cc5af348245
  type: MultipleChoice
  content: |
         Select the correct statements for the two String     types(“String” and “&str”).
          "a. “Strings” are immutable in nature and cannot be modified. "
          "b. “&str” is a primitive data type, whereas “String” is implemented in the standard library."
          "c. To read a file into the strings, we use the read_to_string() method."

  hint: NoHint
  explanation: Strings are mutable in nature
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - strings
  difficultyLevel: High
  choices:
    - content: Only a
      key: A
      order: 0
    - content: Both a & b
      key: B
      order: 1
    - content: Both b & c
      key: C
      order: 2
    - content: None of the above
      key: D
      order: 3


- uuid: 9511276a-dd19-47c4-b086-0d1de8cafedb
  type: MultipleChoice
  content: Which among the following is not an acceptable keyword in rust?
  hint: NoHint
  explanation: var is not a keyword in rust
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: let
      key: A
      order: 0
    - content: var 
      key: B
      order: 1
    - content: impl
      key: C
      order: 2
    - content: mut
      key: D
      order: 3


- uuid: 1ed70de2-99c6-43dd-8793-40ad702d6bff
  type: MultipleChoice
  content: Which of the following brackets are used as placeholders in rust?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "{}"
      key: A
      order: 0
    - content: "[ ]"
      key: B
      order: 1
    - content: "( )"
      key: C
      order: 2
    - content: "< >"
      key: D
      order: 3

- uuid: 7f129510-4d19-4a62-bae1-34109714fa0e
  type: MultipleChoice
  content: Constants in rust can be defined in which scope?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: Global 
      key: A
      order: 0
    - content: Method 
      key: B
      order: 1
    - content: Local
      key: C
      order: 2
    - content: All of the above 
      key: D
      order: 3

- uuid: b29fa10c-2efa-478c-8207-2e2a80af8700
  type: MultipleChoice
  content: Which of the following are the scalar data types present in rust?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: integers, floating-point numbers, booleans, characters
      key: A
      order: 0
    - content: integers, signed numbers, unsigned numbers, booleans, characters
      key: B
      order: 1
    - content: integers, strings, signed numbers, unsigned numbers, booleans
      key: C
      order: 2
    - content: integers, floating-point numbers, strings, booleans
      key: D
      order: 3

- uuid: 775949c1-23b7-42bc-b184-bc755c8d2657
  type: MultipleChoice
  content: The compound data types supported by rust are-
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Arrays, Lists, Red-Black Trees
      key: A
      order: 0
    - content: Arrays, Lists, Vectors
      key: B
      order: 1
    - content: Arrays, Tuples
      key: C
      order: 2
    - content: Arrays, Maps
      key: D
      order: 3


- uuid: 7fd341f0-4921-4e6e-aa0c-c3897f91d3b2
  type: MultipleChoice
  content: |
     Which are valid array declarations in rust? 
     ``` 
            let mut arr : {i64, 3} = [2,3,5];
            let mut arr : {3,3};
            let mut arr = [2,3,5];
      ```
  hint: Look for the wrong declaration format, you may or may not find it
  explanation: No explanation
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Both a & b
      key: A
      order: 0
    - content: Both b & c
      key: B
      order: 1
    - content: Only a
      key: C
      order: 2
    - content: All a, b, & c
      key: D
      order: 3

- uuid: 75d926cd-6f05-4185-916c-fc6c2b90eecd
  type: MultipleChoice
  content: Which of the following has low memory usage, const or static?
  hint: How many of these can we update?
  explanation: "Constant doesn't uses any extra heap memory to update"
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: High
  choices:
    - content: const
      key: A
      order: 0
    - content: static
      key: B
      order: 1
    - content: depends upon the data type
      key: C
      order: 2
    - content: both have the same memory usage
      key: D
      order: 3


- uuid: a7495120-1470-41d4-aeb2-6d9d7ebd876c
  type: MultipleChoice
  content: To use dynamic-sized variables, which of the following should be used?
  hint: No hint
  explanation: No explanation
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: Arrays & Tuples
      key: A
      order: 0
    - content: List all the data types
      key: B
      order: 1
    - content: ?Sized
      key: C
      order: 2
    - content: Dynamic-Sized variables not supported in rust
      key: D
      order: 3

- uuid: 4c564a7d-28d3-4fca-a06d-f3f3fc419d13
  type: MultipleChoice
  content: What is the importance of the “type” keyword in rust?
  hint: Used for another types.
  explanation: Sets an alias of another type.
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: used for dynamic-sized data type
      key: A
      order: 0
    - content: used to create a template
      key: B
      order: 1
    - content: used for user-defined data type
      key: C
      order: 2
    - content: used to set an alias of another type
      key: D
      order: 3

- uuid: d677a228-7f5d-4b5f-8bee-9f40052efafb
  type: MultipleChoice
  content: What is the importance of Cargo in rust?
  hint: What is npm used for?
  explanation: No explanation
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Collection of rust libraries
      key: A
      order: 0
    - content: Modules Package manager
      key: B
      order: 1
    - content: Build system and Package manager
      key: C
      order: 2
    - content: Used to create and build UI projects in rust
      key: D
      order: 3

- uuid: 2715ab2c-35b3-4e6a-9697-f244c6e23676
  type: MultipleChoice
  content: How to print the data type of a variable in rust?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: " `std::any::type_name` "
      key: A
      order: 0
    - content: " `variable.type_name()` "
      key: B
      order: 1
    - content: " `std::intrisic::type_name` "
      key: C
      order: 2
    - content: " `std::variable::type_name` "
      key: D
      order: 3

- uuid: e326751d-bb65-44e4-a6ce-fa62faa96f94
  type: MultipleChoice
  content: Which type cast preserves the mathematical value in all cases?
  hint: NoHint
  explanation: Because they can handle both signed and unsigned values, and are typecasted in one data type only.
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: High
  choices:
    - content: i32 as i64
      key: A
      order: 0
    - content: i64 as i32
      key: B
      order: 1
    - content: usize as u64
      key: C
      order: 2
    - content: f64 as f32
      key: D
      order: 3

- uuid: ffac79fe-2367-42d1-82eb-b6e6127aead5
  type: MultipleChoice
  content: Which of the following cannot be destructed further into smaller segments?
  hint: "Think of the structures they're built upon "
  explanation: No explanation
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Tuples
      key: A
      order: 0
    - content: Traits
      key: B
      order: 1
    - content: Arrays
      key: C
      order: 2
    - content: Structs
      key: D
      order: 3

- uuid: 1b0a3444-3b86-4e09-8021-f4b66cb2ce09
  type: MultipleChoice
  content:  Which comment syntax is not legal?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "<//>"
      key: A
      order: 0
    - content: "/* */"
      key: B
      order: 1
    - content: "//!"
      key: C
      order: 2
    - content: "//"
      key: D
      order: 3

- uuid: 2f9d0f0d-4670-44d7-b69f-d398ecfb3236
  type: MultipleChoice
  content: Values of the array can be deleted.
  hint: NoHint
  explanation: "Values can be updated, but can't be deleted"
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "True"
      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3

- uuid: d2af3b88-9912-4729-9673-4101b7ec4765
  type: MultipleChoice
  content: How do you initialize every element of an array of size 5 with 0?
  hint: "Look at the declarations, don't get confused by the order while declaring"
  explanation: The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: "`let mut arr : {i32;5} = {5;0};`"
      key: A
      order: 0
    - content: "`let mut arr : {i32;5} = {0;5};`"
      key: B
      order: 1
    - content: "`let mut arr : {5;i32} = {5;0};`"
      key: C
      order: 2
    - content: "`let mut arr : {5;i32} = {0;5};`"
      key: D
      order: 3

- uuid: 93c0673c-a86b-4bbb-82b0-3bb77bddab67
  type: MultipleChoice
  content: Tuples in rust are
  hint: NoHint
  explanation: They can handle and store different data types
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: finite heterogeneous compound data types
      key: A
      order: 0
    - content: finite homogeneous compound data types
      key: B
      order: 1
    - content: infinite heterogeneous compound data types
      key: C
      order: 2
    - content: infinite homogeneous compound data types
      key: D
      order: 3


- uuid: 8c7f2429-0db2-4288-bd4a-ef694b39206c
  type: MultipleChoice
  content: |
        "What would be the output of the following code snippet?
           ```
               " Fn main( ) {	"
                  "let mut dodao_io = (""Do"", 69, ""DAO"", 420);"
                  "println!(""{} "", dodao_io );"
                  "println!(""at 0 index = {} "", gfg.0 );"
                "} "
  
          ```"
  hint: No Hint
  explanation: "The first print statement should've had {;?}"
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: ("Do", 69, "DAO", 420) & Do
      key: A
      order: 0
    - content: ("Do", 69, "DAO", 420) only
      key: B
      order: 1
    - content: Compilation Error
      key: C
      order: 2
    - content: ("Do", 69, "DAO", 420) & “Do”
      key: D
      order: 3


- uuid: 2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9
  type: MultipleChoice
  content: What is the process of temporarily making a variable mutable known as?

  hint: NoHint
  explanation: No explantion
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: High
  choices:
    - content: Pseudo-mutability
      key: A
      order: 0
    - content: Foreshadowing
      key: B
      order: 1
    - content: Shadowing
      key: C
      order: 2
    - content: Overshadowing
      key: D
      order: 3

- uuid: d8a49f56-5da8-4b71-b18c-e745d5913dee
  type: MultipleChoice
  content: Which of the following is an example of suffix annotation?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "let a_int: i64 = 20;"
      key: A
      order: 0
    - content: "let a_int = i6420;"
      key: B
      order: 1
    - content: "let a_int = 20i64;"
      key: C
      order: 2
    - content: "None of the above"
      key: D
      order: 3

- uuid: 419058bf-87e9-4c18-9b8e-3f96c3c820b3
  type: MultipleChoice
  content: |
     A. println!("1 + 2 = {}", 1u32 + 2);
     B. println!("1 - 2 = {}", 1u32 + 2);

  hint: Solution being Positive or Negative might make a difference
  explanation: |
      Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: Only A compiles
      key: A
      order: 0
    - content: Only B compiles
      key: B
      order: 1
    - content: Both A & B compile
      key: C
      order: 2
    - content: None of them complies
      key: D
      order: 3

- uuid: d97fc146-6c06-4a5c-a738-93a00cf7214e
  type: MultipleChoice
  content: |
    What is the output of the following code
    "``` println!("{}", 1_00u32 + 2_0); ```"
  hint: NoHint
  explanation: 1_000u32 is similar as 100 of u32 type.
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Compilation Error
      key: A
      order: 0
    - content: Runtime Error
      key: B
      order: 1
    - content: "3"
      key: C
      order: 2
    - content: "120"
      key: D
      order: 3


- uuid: 2448d741-4c38-46f3-b681-c3ffb44e54ac
  type: MultipleChoice
  content: String in standard library has more functionalities coded into it than string slice?

  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Moderate
  choices:
    - content: "True"
      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3


- uuid: 923d11ba-5c1c-4d48-8101-87ee08e0fa0e
  type: MultipleChoice
  content: |
    What is the output of the following code
      " ```fn main() {
        let first_string = "This is some string ".to_string();
        let second_string = "Let's add some Data";
    
        let final_string = first_string + &second_string;
    
        println!("First string is: {}", first_string);   
        println!("Second string is: {}", second_string);
    
        println!("Finally we have: {}", final_string);
    }
    ``` "


  hint: NoHint
  explanation: Syntatical Error in the code snippet
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Only 1st print statement shows an output
      key: A
      order: 0
    - content: Only 1st and 2nd print statement shows an output
      key: B
      order: 1
    - content: All the 3 string statements show an output
      key: C
      order: 2
    - content: Error occurs
      key: D
      order: 3


- uuid: ec5e9c9b-cafa-484e-8feb-51db5a0b7a33
  type: MultipleChoice
  content: Which of the following operator is used by string slices to reference?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "&"
      key: A
      order: 0
    - content: "%"
      key: B
      order: 1
    - content: "#"
      key: C
      order: 2
    - content: "*"
      key: D
      order: 3


- uuid: d0b24301-eda6-49d7-bf45-88777b13e15f
  type: MultipleChoice
  content: Select the incorrect statement from the following
  hint: Nohint
  explanation: No explanation
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: High
  choices:
    - content: Once you get a string slice from a string, then you cannot really                 modify that String anymore
      key: A
      order: 0
    - content: Using slices to work with Strings allows us to add an extra                       security measure.
      key: B
      order: 1
    - content: If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error
      key: C
      order: 2
    - content: String Slice mutably borrows the String itself
      key: D
      order: 3


- uuid: ef79a0da-3da6-445e-92b5-1d0e17799db6
  type: MultipleChoice
  content: What will happen at the runtime if overflow occurs?
  hint: NoHint
  explanation: The memory stack is full and overflows, so a default panic occurs                 and the program crashes
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: High
  choices:
    - content: Panic and crashes the program
      key: A
      order: 0
    - content: Garbage values will be output
      key: B
      order: 1
    - content: Those values are ignored and the output is as expected
      key: C
      order: 2
    - content: Overflow is handled already by rust, so it doesn’t occur
      key: D
      order: 3

- uuid: 1b152ab5-6524-49e0-b5c0-8bd5153b1ab1
  type: MultipleChoice
  content: Character literals are specified using double quotes, as opposed to               single quotes which stand for string literals.
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "True"
      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3


- uuid: b49785fb-dd24-43b5-9f5a-e7dedc98cc5f
  type: MultipleChoice
  content: Strings size is not known at compile time 
  hint: hint
  explanation: explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "True"
      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3

- uuid: 504040ac-6167-4304-8d6e-1e559975bac5
  type: MultipleChoice
  content: |
            "```  fn main() {
                      let mut x = 2.0; 
                  
                      x: i32= 3.0; 
                  }
             ```"
  hint: type declaration
  explanation: i32 is intialized as a float data type
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: The code compiles without errors
      key: A
      order: 0
    - content: The code has errors because of immutability
      key: B
      order: 1
    - content: The code has errors because of illegal type conversion
      key: C
      order: 2
    - content: The code has errors because of no print and return statements
      key: D
      order: 3


- uuid: b0ef2f16-b79d-433a-af54-dc218060ef13
  type: MultipleChoice
  content: If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use

  hint: Statically and Dynamic in nature
  explanation: Vector is a Dynamic nature
  answerKeys:
    - C
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Arrays
      key: A
      order: 0
    - content: Tuples
      key: B
      order: 1
    - content: Vectors
      key: C
      order: 2
    - content: bool type Variables
      key: D
      order: 3

- uuid: c731455f-5296-4b1f-9aee-46a4f77c25c1
  type: MultipleChoice
  content: BOOLEAN is a type of data type that basically gives a tautology or                fallacy.
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "True"
      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3


- uuid: f8497eb4-2e55-4e70-98c9-b395f254f412
  type: MultipleChoice
  content: What are the categories in which keywords are divided in rust?
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Weak
      key: A
      order: 0
    - content: Strict
      key: B
      order: 1
    - content: Reserved
      key: C
      order: 2
    - content: All of the above
      key: D
      order: 3


- uuid: 836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93
  type: MultipleChoice
  content: Which of the following can be used as a variable name in rust?
  hint: NoHint
  explanation: Rest are keywords in rust
  answerKeys:
    -D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: crate
      key: A
      order: 0
    - content: match
      key: B
      order: 1
    - content: await
      key: C
      order: 2
    - content: tuple
      key: D
      order: 3

- uuid: 853bbf17-ceb6-4a7c-9a32-c05f048a9ce6
  type: MultipleChoice
  content: Identify the wrong set of rust keywords
  hint: hint
  explanation: explanation
  answerKeys:
    - D
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: async, await, where, use
      key: A
      order: 0
    - content: Move, return, mut, while
      key: B
      order: 1
    - content: union, dyn, try, abstract
      key: C
      order: 2
    - content: become, box, do, incur
      key: D
      order: 3

- uuid: 118287fb-f962-4c6a-b7bb-f774e36f02bf
  type: MultipleChoice
  content:  Rust variable names can start with
  hint: hint
  explanation: explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: Letter, underscore
      key: A
      order: 0
    - content: Letter, digits
      key: B
      order: 1
    - content: Underscore, digits
      key: C
      order: 2
    - content: All of the above
      key: D
      order: 3

- uuid: 6ffbcd01-5b77-44bd-a9e1-56d3adb81a61
  type: MultipleChoice
  content: |
            q What is the result of the following calculation in rust "1.0/0.0"
  hint: hint
  explanation: explanation
  answerKeys:
    - B
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: A positive number
      key: A
      order: 0
    - content: A negative number
      key: B
      order: 1
    - content: An unsigned number
      key: C
      order: 2
    - content: None of the above
      key: D
      order: 3

- uuid: e8c7d69e-3899-43aa-aaec-e45870a32a3f
  type: MultipleChoice
  content: In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.
  hint: NoHint
  explanation: No explanation
  answerKeys:
    - A
  topic: 01_data_types
  subTopics:
    - variables
  difficultyLevel: Low
  choices:
    - content: "True"
      key: A
      order: 0
    - content: "False"
      key: B
      order: 1
    # - content: option 3
    #   key: C
    #   order: 2
    # - content: option 4
    #   key: D
    #   order: 3
