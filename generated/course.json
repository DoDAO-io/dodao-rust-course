{
  "key": "rust-course",
  "title": "Rust Course",
  "summary": "This is a Rust Course",
  "details": "\"Line1\" \n\"Line2\" \n\"Line3\"\n",
  "duration": "45 - 60 mins",
  "topics": [
    {
      "title": "Data Types",
      "key": "data-types",
      "details": "This chapter explains the basics of Data Types",
      "order": 0,
      "questions": [
        {
          "uuid": "ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "23a0e9e5-6c47-4512-98a5-4cd3ab6eff25",
          "type": "SingleChoice",
          "content": "Space taken by a Character data type in rust is",
          "hint": "It doesn't use ASCII values",
          "explanation": "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "1 byte",
              "key": "A",
              "order": 0
            },
            {
              "content": "4 bytes",
              "key": "B",
              "order": 1
            },
            {
              "content": "8 bytes",
              "key": "C",
              "order": 2
            },
            {
              "content": "16 bytes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "39385b22-7604-492f-9c2e-aaae409c6b79",
          "type": "SingleChoice",
          "content": "Rust is a Dynamically typed language.",
          "hint": "Does the compiler need to know the data type at compile time?",
          "explanation": "It is statically typed",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "6b844c24-f769-4662-a591-83c0a5f8c6c3",
          "type": "SingleChoice",
          "content": "Select the incorrect declaration statement",
          "hint": "NoHint",
          "explanation": "It is declared as an unsigned integer, but the value is negative",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let mut x: u32 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let mut x: i32 = -20;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let mut x: u32 = -20;",
              "key": "C",
              "order": 2
            },
            {
              "content": "let mut x = 20;",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6f2cb4ae-db4d-4c04-bfd4-37669695dab0",
          "type": "SingleChoice",
          "content": "Suppose you declared a variable as u8 and then assigned it a value of \"257\". What would be the output if it’s compiled with a \"`“--release” flag?`\"",
          "hint": "NoHint",
          "explanation": "After 255 the digits start rolling back to 0, 1 and so on",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "257",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: Integer Overflow",
              "key": "B",
              "order": 1
            },
            {
              "content": "0",
              "key": "C",
              "order": 2
            },
            {
              "content": "1",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "0708f185-46b5-45ee-ac47-3e7e1ca611b3",
          "type": "SingleChoice",
          "content": "Are Tuples in rust dynamic in nature?\n\"Eg:-\" \n``` \n  let tup: (i32, f64, bool) = (500, 6.4, true); \n```\n",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Yes",
              "key": "A",
              "order": 0
            },
            {
              "content": "No",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d11a531f-f32f-4764-a60a-2cc5af348245",
          "type": "SingleChoice",
          "content": "Select the correct statements for the two String     types(“String” and “&str”).\n \"a. “Strings” are immutable in nature and cannot be modified. \"\n \"b. “&str” is a primitive data type, whereas “String” is implemented in the standard library.\"\n \"c. To read a file into the strings, we use the read_to_string() method.\"\n",
          "hint": "NoHint",
          "explanation": "Strings are mutable in nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Only a",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both a & b",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both b & c",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "9511276a-dd19-47c4-b086-0d1de8cafedb",
          "type": "SingleChoice",
          "content": "Which among the following is not an acceptable keyword in rust?",
          "hint": "NoHint",
          "explanation": "var is not a keyword in rust",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "let",
              "key": "A",
              "order": 0
            },
            {
              "content": "var",
              "key": "B",
              "order": 1
            },
            {
              "content": "impl",
              "key": "C",
              "order": 2
            },
            {
              "content": "mut",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1ed70de2-99c6-43dd-8793-40ad702d6bff",
          "type": "SingleChoice",
          "content": "Which of the following brackets are used as placeholders in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "{}",
              "key": "A",
              "order": 0
            },
            {
              "content": "[ ]",
              "key": "B",
              "order": 1
            },
            {
              "content": "( )",
              "key": "C",
              "order": 2
            },
            {
              "content": "< >",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7f129510-4d19-4a62-bae1-34109714fa0e",
          "type": "SingleChoice",
          "content": "Constants in rust can be defined in which scope?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Global",
              "key": "A",
              "order": 0
            },
            {
              "content": "Method",
              "key": "B",
              "order": 1
            },
            {
              "content": "Local",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b29fa10c-2efa-478c-8207-2e2a80af8700",
          "type": "SingleChoice",
          "content": "Which of the following are the scalar data types present in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "integers, floating-point numbers, booleans, characters",
              "key": "A",
              "order": 0
            },
            {
              "content": "integers, signed numbers, unsigned numbers, booleans, characters",
              "key": "B",
              "order": 1
            },
            {
              "content": "integers, strings, signed numbers, unsigned numbers, booleans",
              "key": "C",
              "order": 2
            },
            {
              "content": "integers, floating-point numbers, strings, booleans",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "775949c1-23b7-42bc-b184-bc755c8d2657",
          "type": "SingleChoice",
          "content": "The compound data types supported by rust are-",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays, Lists, Red-Black Trees",
              "key": "A",
              "order": 0
            },
            {
              "content": "Arrays, Lists, Vectors",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays, Tuples",
              "key": "C",
              "order": 2
            },
            {
              "content": "Arrays, Maps",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7fd341f0-4921-4e6e-aa0c-c3897f91d3b2",
          "type": "SingleChoice",
          "content": "Which are valid array declarations in rust? \n``` \n       let mut arr : {i64, 3} = [2,3,5];\n       let mut arr : {3,3};\n       let mut arr = [2,3,5];\n ```\n",
          "hint": "Look for the wrong declaration format, you may or may not find it",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Both a & b",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both b & c",
              "key": "B",
              "order": 1
            },
            {
              "content": "Only a",
              "key": "C",
              "order": 2
            },
            {
              "content": "All a, b, & c",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "75d926cd-6f05-4185-916c-fc6c2b90eecd",
          "type": "SingleChoice",
          "content": "Which of the following has low memory usage, const or static?",
          "hint": "How many of these can we update?",
          "explanation": "Constant doesn't uses any extra heap memory to update",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "const",
              "key": "A",
              "order": 0
            },
            {
              "content": "static",
              "key": "B",
              "order": 1
            },
            {
              "content": "depends upon the data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "both have the same memory usage",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a7495120-1470-41d4-aeb2-6d9d7ebd876c",
          "type": "SingleChoice",
          "content": "To use dynamic-sized variables, which of the following should be used?",
          "hint": "No hint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Arrays & Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "List all the data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "?Sized",
              "key": "C",
              "order": 2
            },
            {
              "content": "Dynamic-Sized variables not supported in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "4c564a7d-28d3-4fca-a06d-f3f3fc419d13",
          "type": "SingleChoice",
          "content": "What is the importance of the “type” keyword in rust?",
          "hint": "Used for another types.",
          "explanation": "Sets an alias of another type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "used for dynamic-sized data type",
              "key": "A",
              "order": 0
            },
            {
              "content": "used to create a template",
              "key": "B",
              "order": 1
            },
            {
              "content": "used for user-defined data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "used to set an alias of another type",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d677a228-7f5d-4b5f-8bee-9f40052efafb",
          "type": "SingleChoice",
          "content": "What is the importance of Cargo in rust?",
          "hint": "What is npm used for?",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "package-manager"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Collection of rust libraries",
              "key": "A",
              "order": 0
            },
            {
              "content": "Modules Package manager",
              "key": "B",
              "order": 1
            },
            {
              "content": "Build system and Package manager",
              "key": "C",
              "order": 2
            },
            {
              "content": "Used to create and build UI projects in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2715ab2c-35b3-4e6a-9697-f244c6e23676",
          "type": "SingleChoice",
          "content": "How to print the data type of a variable in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": " `std::any::type_name` ",
              "key": "A",
              "order": 0
            },
            {
              "content": " `variable.type_name()` ",
              "key": "B",
              "order": 1
            },
            {
              "content": " `std::intrisic::type_name` ",
              "key": "C",
              "order": 2
            },
            {
              "content": " `std::variable::type_name` ",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e326751d-bb65-44e4-a6ce-fa62faa96f94",
          "type": "SingleChoice",
          "content": "Which type cast preserves the mathematical value in all cases?",
          "hint": "NoHint",
          "explanation": "Because they can handle both signed and unsigned values, and are typecasted in one data type only.",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "i32 as i64",
              "key": "A",
              "order": 0
            },
            {
              "content": "i64 as i32",
              "key": "B",
              "order": 1
            },
            {
              "content": "usize as u64",
              "key": "C",
              "order": 2
            },
            {
              "content": "f64 as f32",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ffac79fe-2367-42d1-82eb-b6e6127aead5",
          "type": "SingleChoice",
          "content": "Which of the following cannot be destructed further into smaller segments?",
          "hint": "Think of the structures they're built upon ",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "Traits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays",
              "key": "C",
              "order": 2
            },
            {
              "content": "Structs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b0a3444-3b86-4e09-8021-f4b66cb2ce09",
          "type": "SingleChoice",
          "content": "Which comment syntax is not legal?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "<//>",
              "key": "A",
              "order": 0
            },
            {
              "content": "/* */",
              "key": "B",
              "order": 1
            },
            {
              "content": "//!",
              "key": "C",
              "order": 2
            },
            {
              "content": "//",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f9d0f0d-4670-44d7-b69f-d398ecfb3236",
          "type": "SingleChoice",
          "content": "Values of the array can be deleted.",
          "hint": "NoHint",
          "explanation": "Values can be updated, but can't be deleted",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d2af3b88-9912-4729-9673-4101b7ec4765",
          "type": "SingleChoice",
          "content": "How do you initialize every element of an array of size 5 with 0?",
          "hint": "Look at the declarations, don't get confused by the order while declaring",
          "explanation": "The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "`let mut arr : {i32;5} = {5;0};`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`let mut arr : {i32;5} = {0;5};`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`let mut arr : {5;i32} = {5;0};`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`let mut arr : {5;i32} = {0;5};`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "93c0673c-a86b-4bbb-82b0-3bb77bddab67",
          "type": "SingleChoice",
          "content": "Tuples in rust are",
          "hint": "NoHint",
          "explanation": "They can handle and store different data types",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "finite heterogeneous compound data types",
              "key": "A",
              "order": 0
            },
            {
              "content": "finite homogeneous compound data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "infinite heterogeneous compound data types",
              "key": "C",
              "order": 2
            },
            {
              "content": "infinite homogeneous compound data types",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8c7f2429-0db2-4288-bd4a-ef694b39206c",
          "type": "SingleChoice",
          "content": "What would be the output of the following code snippet?\n  ```\n    Fn main( ) {\t\n      let mut dodao_io = (\"\"Do\"\", 69, \"\"DAO\"\", 420);\n      println!(\"\"{} \"\", dodao_io );\n      println!(\"\"at 0 index = {} \"\", gfg.0 );\n    } \n  ```\n",
          "hint": "No Hint",
          "explanation": "The first print statement should've had {;?}",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & Do",
              "key": "A",
              "order": 0
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) only",
              "key": "B",
              "order": 1
            },
            {
              "content": "Compilation Error",
              "key": "C",
              "order": 2
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & “Do”",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9",
          "type": "SingleChoice",
          "content": "What is the process of temporarily making a variable mutable known as?",
          "hint": "NoHint",
          "explanation": "No explantion",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Pseudo-mutability",
              "key": "A",
              "order": 0
            },
            {
              "content": "Foreshadowing",
              "key": "B",
              "order": 1
            },
            {
              "content": "Shadowing",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overshadowing",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d8a49f56-5da8-4b71-b18c-e745d5913dee",
          "type": "SingleChoice",
          "content": "Which of the following is an example of suffix annotation?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let a_int: i64 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let a_int = i6420;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let a_int = 20i64;",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "419058bf-87e9-4c18-9b8e-3f96c3c820b3",
          "type": "SingleChoice",
          "content": "A. println!(\"1 + 2 = {}\", 1u32 + 2);\nB. println!(\"1 - 2 = {}\", 1u32 + 2);\n",
          "hint": "Solution being Positive or Negative might make a difference",
          "explanation": "Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile\n",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Only A compiles",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only B compiles",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both A & B compile",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of them complies",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d97fc146-6c06-4a5c-a738-93a00cf7214e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n\"``` println!(\"{}\", 1_00u32 + 2_0); ```\"\n",
          "hint": "NoHint",
          "explanation": "1_000u32 is similar as 100 of u32 type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Compilation Error",
              "key": "A",
              "order": 0
            },
            {
              "content": "Runtime Error",
              "key": "B",
              "order": 1
            },
            {
              "content": "3",
              "key": "C",
              "order": 2
            },
            {
              "content": "120",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2448d741-4c38-46f3-b681-c3ffb44e54ac",
          "type": "SingleChoice",
          "content": "String in standard library has more functionalities coded into it than string slice?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "923d11ba-5c1c-4d48-8101-87ee08e0fa0e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n  ```\n  fn main() {\n    let first_string = \"This is some string \".to_string();\n    let second_string = \"Let's add some Data\";\n\n    let final_string = first_string + &second_string;\n\n    println!(\"First string is: {}\", first_string);   \n    println!(\"Second string is: {}\", second_string);\n\n    println!(\"Finally we have: {}\", final_string);\n  }\n  ```\n",
          "hint": "NoHint",
          "explanation": "Syntatical Error in the code snippet",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Only 1st print statement shows an output",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only 1st and 2nd print statement shows an output",
              "key": "B",
              "order": 1
            },
            {
              "content": "All the 3 string statements show an output",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error occurs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ec5e9c9b-cafa-484e-8feb-51db5a0b7a33",
          "type": "SingleChoice",
          "content": "Which of the following operator is used by string slices to reference?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "`&`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`%`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`#`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`*`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d0b24301-eda6-49d7-bf45-88777b13e15f",
          "type": "SingleChoice",
          "content": "Select the incorrect statement from the following",
          "hint": "Nohint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Once you get a string slice from a string, then you cannot really                 modify that String anymore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Using slices to work with Strings allows us to add an extra                       security measure.",
              "key": "B",
              "order": 1
            },
            {
              "content": "If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error",
              "key": "C",
              "order": 2
            },
            {
              "content": "String Slice mutably borrows the String itself",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ef79a0da-3da6-445e-92b5-1d0e17799db6",
          "type": "SingleChoice",
          "content": "What will happen at the runtime if overflow occurs?",
          "hint": "NoHint",
          "explanation": "The memory stack is full and overflows, so a default panic occurs                 and the program crashes",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Panic and crashes the program",
              "key": "A",
              "order": 0
            },
            {
              "content": "Garbage values will be output",
              "key": "B",
              "order": 1
            },
            {
              "content": "Those values are ignored and the output is as expected",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overflow is handled already by rust, so it doesn’t occur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b152ab5-6524-49e0-b5c0-8bd5153b1ab1",
          "type": "SingleChoice",
          "content": "Character literals are specified using double quotes, as opposed to single quotes which stand for string literals.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "b49785fb-dd24-43b5-9f5a-e7dedc98cc5f",
          "type": "SingleChoice",
          "content": "Strings size is not known at compile time",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "504040ac-6167-4304-8d6e-1e559975bac5",
          "type": "SingleChoice",
          "content": "For the following code\n ```  \n   fn main() {\n     let mut x = 2.0;\n     x: i32= 3.0; \n   }\n ```\n",
          "hint": "type declaration",
          "explanation": "i32 is intialized as a float data type",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The code compiles without errors",
              "key": "A",
              "order": 0
            },
            {
              "content": "The code has errors because of immutability",
              "key": "B",
              "order": 1
            },
            {
              "content": "The code has errors because of illegal type conversion",
              "key": "C",
              "order": 2
            },
            {
              "content": "The code has errors because of no print and return statements",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b0ef2f16-b79d-433a-af54-dc218060ef13",
          "type": "SingleChoice",
          "content": "If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use",
          "hint": "Statically and Dynamic in nature",
          "explanation": "Vector is a Dynamic nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays",
              "key": "A",
              "order": 0
            },
            {
              "content": "Tuples",
              "key": "B",
              "order": 1
            },
            {
              "content": "Vectors",
              "key": "C",
              "order": 2
            },
            {
              "content": "bool type Variables",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c731455f-5296-4b1f-9aee-46a4f77c25c1",
          "type": "SingleChoice",
          "content": "BOOLEAN is a type of data type that basically gives a tautology or                fallacy.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "f8497eb4-2e55-4e70-98c9-b395f254f412",
          "type": "SingleChoice",
          "content": "What are the categories in which keywords are divided in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Weak",
              "key": "A",
              "order": 0
            },
            {
              "content": "Strict",
              "key": "B",
              "order": 1
            },
            {
              "content": "Reserved",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93",
          "type": "SingleChoice",
          "content": "Which of the following can be used as a variable name in rust?",
          "hint": "NoHint",
          "explanation": "Rest are keywords in rust",
          "answerKeys": "-D",
          "topic": "01_data_types",
          "subTopics": [
            "variables",
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "crate",
              "key": "A",
              "order": 0
            },
            {
              "content": "match",
              "key": "B",
              "order": 1
            },
            {
              "content": "await",
              "key": "C",
              "order": 2
            },
            {
              "content": "tuple",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "853bbf17-ceb6-4a7c-9a32-c05f048a9ce6",
          "type": "SingleChoice",
          "content": "Identify the wrong set of rust keywords",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "async, await, where, use",
              "key": "A",
              "order": 0
            },
            {
              "content": "Move, return, mut, while",
              "key": "B",
              "order": 1
            },
            {
              "content": "union, dyn, try, abstract",
              "key": "C",
              "order": 2
            },
            {
              "content": "become, box, do, incur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "118287fb-f962-4c6a-b7bb-f774e36f02bf",
          "type": "SingleChoice",
          "content": "Rust variable names can start with",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Letter, underscore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Letter, digits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Underscore, digits",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6ffbcd01-5b77-44bd-a9e1-56d3adb81a61",
          "type": "SingleChoice",
          "content": "q What is the result of the following calculation in rust \"1.0/0.0\"\n",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "A positive number",
              "key": "A",
              "order": 0
            },
            {
              "content": "A negative number",
              "key": "B",
              "order": 1
            },
            {
              "content": "An unsigned number",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e8c7d69e-3899-43aa-aaec-e45870a32a3f",
          "type": "SingleChoice",
          "content": "In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "699f89a5-4c2a-4442-afe7-eabc1fb8f5fa",
          "title": "Introduction to Blockchain Technology",
          "summary": "Blockchain is a ledger",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=u70_rafPs-0",
          "subTopics": [
            "variables"
          ],
          "details": "This video explains about\n* Point 1\n* Point 2\n"
        }
      ],
      "summaries": [
        {
          "title": "Typed language",
          "shortTitle": "Typed language",
          "key": "typed_language",
          "summary": "A programming language can be either a Dynamically-typed language or a Staticlly-typed language",
          "details": "- Dynamically-Typed Languages\n  * Dynamically-typed languages are the languages where the interpreter assigns variables a data type at runtime based on the variable's value at that time.\n  * Dynamic languages are usually interpreted (with some pre-processing for optimisation) so it is fast to make changes and then immediately run the updated program.\n  * Dynamically-Typed languages allows for Fast Development Cycles and Fast Start-up times.\n  * Some Examples of Dynamically Typed Languages are:- JavaScript, Python, Perl, Ruby, etc.\n- Statically-Typed Languages\n  * Statically-typed languages are the languages where variable types are known at compile time i.e. the type checking is done at compile time.\n  * Many runtime errors become compile time errors as the compiler ensures that you are writing 'correct' code. This leads to a much smoother development experience.\n  * The execution of the code will be faster compared to the dynamically-typed languages.\n  * The compiler can use the type system to provide language features that are more expressive and succinct.\n  * Some examples of Statically-Typed Languages are:- C++, Rust, C, Java, etc.\n- Rust is a Statically-Typed Language\n"
        },
        {
          "title": "Value Types",
          "shortTitle": "Value Types",
          "key": "value-types",
          "summary": "Rust has two major Data Value Types, which include \n  1. Scalar Types\n  2. Compound ypes\n",
          "details": "- Scalar Types\n  * A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.\n  - Integers\n    * An integer is a number without a fractional component.\n    * An integer can be of the following sizes:- 8-bit, 16-bit, 32-bit, 64-bit, 128-bit, arch.\n    * Integers can be either signed or unsigned. Signed and unsigned refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).\n    * Integers can be declared using keyword let, and explicitly defining the variable size and it's type of signed or unsigned integer.\n    * For example, we can declare a 64-bit signed and 32-bit unsigned integer in the following ways respectively :- \n    ```\n        1. let mut x: i64 = -20;\n        2. let mut x: u32 = 20;\n    ```\n    * The isize and usize types depend on the architecture of your build, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n    * The number literals that can be multiple numeric types allow a type suffix, such as `20u32`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000` , which will have the same value as if you had specified `1000`.\n    - Integer Overflow\n      * Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur, which can result in one of two behaviors:- \n        1. When you’re compiling in `debug` mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs.\n        2. When you’re compiling in release mode with the `--release` flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping.\n  - Floating-Point Types\n    * Floating-Point Types are number with the decimal points.\n    * Floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.\n    * All the Floating-Point Types are signed.\n    * The default Floating-Point Type is of 64-bit.\n    * The `f32` type is a single-precision float, and `f64` has double precision.\n    * We can declare a float type variable in the following ways:- \n     ```\n        fn main() {\n              let x = 2.0; // f64\n              let y: f32 = 3.0; // f32\n        }\n      ```\n  - Boolean Type\n    * There are two possible constant values:- True & False.\n    * Booleans are one byte in size.\n    * They are declared using the keyword 'bool'.\n  - Character Type\n    * Character Data Type doesn't use ASCII values like other programming languages but uses Unicode Scalar Value.\n    * It uses 4 bytes i.e. 32 bits of space for each character rather than 1 byte because of Unicode Scalar Values.\n    * We can use many more types of characters in rust, like, Chinese, emojis, etc.\n- Compound Data Types\n  * Compound types can group multiple values into one type. The two primitive compound types in rust are: Tuples and Arrays.\n  - Tuples\n    * A tuple is a general way of grouping together a number of values with a variety of types into one compound type.\n    * Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n    * Tuples are created by a comma seperated List.\n    * Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.\n    * For Example:- \n      ```\n        fn main() {\n          let tup: (i32, f64, u8) = (500, 6.4, 1);\n        }\n      ```\n    * We can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access\n    * The tuple without any values has a special name knows as \"unit\".\n    * \"unit's\" value and its corresponding type are both written () and represent an empty value or an empty return type. \n    * Expressions implicitly return the unit value if they don’t return any other value. \n  - Arrays\n    * Arrays are a collection of multiple values, stored in a single entity.\n    * Unlike a tuple, every element of an array must have the same data type.\n    * Arrays in Rust have a fixed length, i.e. they are not dynamic in nature by default.\n    * Arrays are useful when you want your data allocated on the stack rather than the memory heap.\n    * For Example:- \n      ```\n        fn main() {\n            let a: [i32; 5] = [1, 2, 3, 4, 5];\n        }\n      ```\n      Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.\n    *  We can access elements of an array using indexing, like this:\n      ```\n        fn main() {\n            let a = [1, 2, 3, 4, 5];\n        \n            let first = a[0]; // outputs 1\n            let second = a[1]; // outputs 2\n        }\n      ```\n"
        },
        {
          "title": "Variables",
          "shortTitle": "Variables",
          "key": "variables",
          "summary": "Variables are used to store the values of a particular data type.",
          "details": "- Variables and Mutability\n  * In Rust, variables are immutable in nature by default.\n  * When a variable is immutable, once a value is bound to a name, you can’t change that value\n  * To make the variables mutable, we use the keyword:- `mut`.\n  * For Example:-\n    ```\n      fn main() {\n          let mut x = 5;\n          println!(\"The value of x is: {x}\");\n          x = 6;\n          println!(\"The value of x is: {x}\");\n      }\n    ```\n- Constants\n  * Constants are values that are bound to a name and are not allowed to change, i.e. they are also immutable.\n  * Usage of keyword `mut` isn't allowed with constants.\n  * Constants are immutable by default, and also they’re always immutable.\n  * We declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated.\n  * Constants can be declared in any scope, including the global scope, making them useful for values that many parts of code need to know about.\n  * Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n  * For Example:-\n    ```\n      const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n    ```\n"
        },
        {
          "title": "Keywords",
          "shortTitle": "Keywords",
          "key": "keywords",
          "summary": "Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Rust divides keywords into three categories:\n    1. Strict\n    2. Reserved \n    3. Weak\n",
          "details": "- Strict Keywords\n  * These keywords can only be used in their correct contexts. They cannot be used as the names of: Items, Variables and function parameters, etc.\n  * For Example:- ` mut, break, else, continue, return, impl, etc. ` \n- Reserved Variables\n  * These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords.\n  * For Example:- ` abstract, try, do, final, typeof, etc. `\n- Weak Keywords\n  * These keywords have special meaning only in certain contexts.\n  * For example, it is possible to declare a variable or method with the name `union`.\n"
        },
        {
          "title": "Bit Manipulation",
          "shortTitle": "Bit Manipulation",
          "key": "bit-manupilation",
          "summary": "Bit manipulation is the process of applying logical operations on a sequence of bits to achieve a required result.",
          "details": "- Bit Mnipulation is strictly done by rust compilers for storing data in variables, for two's compliment and many other purposes.\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "strings",
          "summary": "There are two types of strings in Rust: `String` and `&str`.",
          "details": "- String\n  * Strings are formed by a list of characters, which is really an \"array of characters\".\n  * A String is stored as a vector of bytes `(Vec<u8>)`.\n  * A String is made up of three components: a pointer to some bytes, a length, and a capacity.\n  * The pointer points to an internal buffer String uses to store its data.\n  * The length is the number of bytes currently stored in the buffer, and the capacity is the size of the buffer in bytes. As such, the length will always be less than or equal to the capacity.\n  * The buffer is always stored on the heap.\n  * It is guaranteed to always be a valid `UTF-8` sequence. \n  * String is heap allocated, growable and not null terminated.\n  * We can create a String from a literal string with `String::from`\n  * We can append a char to a String with the push method, and append a &str with the `push_str` method\n- &str\n  * The str type, also called a ‘string slice’, is the most primitive string type.\n  * A &str is made up of two components: a pointer to some bytes, and a length.\n  * `&str` is `(&[u8])` that always points to a valid UTF-8 sequence.\n  * It can be used to view into a String, just like `&[T]` is a view into `Vec<T>`.\n"
        },
        {
          "title": "Package Manager",
          "shortTitle": "Package Manager",
          "key": "package-manager",
          "summary": "- A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. \n",
          "details": "- Cargo is the Rust package manager.\n"
        }
      ]
    }
  ]
}