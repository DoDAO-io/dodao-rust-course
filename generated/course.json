{
  "key": "rust-course",
  "title": "Rust Course",
  "summary": "Smart contracts allow users to implement conditions, rules and policies of the blockchain applications. \nIn this course you will learn how to write smart contracts and all the features of Rust language.\n",
  "details": "\"Line1\" \n\"Line2\" \n\"Line3\"\n",
  "duration": "4 - 6 hours",
  "highlights": [
    "Rust smart contracts",
    "All the features of Rust",
    "Advanced Rust concepts",
    "Summaries and questions for each chapter"
  ],
  "publishStatus": "Live",
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/courses/DoDAO/Rust/rust-logo-512x512.png",
  "topics": [
    {
      "title": "Your First Solana Smart Contract",
      "key": "first-smart-contract",
      "details": "This chapter introduces you to the world of solana smart contracts written in rust. Covered topics in this chapter\n - Introduction to a simple smart contract\n - Explanation of the whole smart contract\n - Project Management with Cargo Crates\n    1. Installing Cargo\n    2. Packages and Crates\n    3. toml and Project formats\n    4. Cargo Commands\n",
      "order": 0,
      "questions": [
        {
          "uuid": "ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "23a0e9e5-6c47-4512-98a5-4cd3ab6eff25",
          "type": "SingleChoice",
          "content": "Space taken by a Character data type in rust is",
          "hint": "It doesn't use ASCII values",
          "explanation": "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "1 byte",
              "key": "A",
              "order": 0
            },
            {
              "content": "4 bytes",
              "key": "B",
              "order": 1
            },
            {
              "content": "8 bytes",
              "key": "C",
              "order": 2
            },
            {
              "content": "16 bytes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "39385b22-7604-492f-9c2e-aaae409c6b79",
          "type": "SingleChoice",
          "content": "Rust is a Dynamically typed language.",
          "hint": "Does the compiler need to know the data type at compile time?",
          "explanation": "It is statically typed",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "6b844c24-f769-4662-a591-83c0a5f8c6c3",
          "type": "SingleChoice",
          "content": "Select the incorrect declaration statement",
          "hint": "NoHint",
          "explanation": "It is declared as an unsigned integer, but the value is negative",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let mut x: u32 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let mut x: i32 = -20;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let mut x: u32 = -20;",
              "key": "C",
              "order": 2
            },
            {
              "content": "let mut x = 20;",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6f2cb4ae-db4d-4c04-bfd4-37669695dab0",
          "type": "SingleChoice",
          "content": "Suppose you declared a variable as u8 and then assigned it a value of \"257\". What would be the output if it’s compiled with a \"`“--release” flag?`\"",
          "hint": "NoHint",
          "explanation": "After 255 the digits start rolling back to 0, 1 and so on",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "257",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: Integer Overflow",
              "key": "B",
              "order": 1
            },
            {
              "content": "0",
              "key": "C",
              "order": 2
            },
            {
              "content": "1",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "0708f185-46b5-45ee-ac47-3e7e1ca611b3",
          "type": "SingleChoice",
          "content": "Are Tuples in rust dynamic in nature?\n\"Eg:-\" \n``` \n  let tup: (i32, f64, bool) = (500, 6.4, true); \n```\n",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Yes",
              "key": "A",
              "order": 0
            },
            {
              "content": "No",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d11a531f-f32f-4764-a60a-2cc5af348245",
          "type": "SingleChoice",
          "content": "Select the correct statements for the two String     types(“String” and “&str”).\n \"a. “Strings” are immutable in nature and cannot be modified. \"\n \"b. “&str” is a primitive data type, whereas “String” is implemented in the standard library.\"\n \"c. To read a file into the strings, we use the read_to_string() method.\"\n",
          "hint": "NoHint",
          "explanation": "Strings are mutable in nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Only a",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both a & b",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both b & c",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "9511276a-dd19-47c4-b086-0d1de8cafedb",
          "type": "SingleChoice",
          "content": "Which among the following is not an acceptable keyword in rust?",
          "hint": "NoHint",
          "explanation": "var is not a keyword in rust",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "let",
              "key": "A",
              "order": 0
            },
            {
              "content": "var",
              "key": "B",
              "order": 1
            },
            {
              "content": "impl",
              "key": "C",
              "order": 2
            },
            {
              "content": "mut",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1ed70de2-99c6-43dd-8793-40ad702d6bff",
          "type": "SingleChoice",
          "content": "Which of the following brackets are used as placeholders in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "{}",
              "key": "A",
              "order": 0
            },
            {
              "content": "[ ]",
              "key": "B",
              "order": 1
            },
            {
              "content": "( )",
              "key": "C",
              "order": 2
            },
            {
              "content": "< >",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7f129510-4d19-4a62-bae1-34109714fa0e",
          "type": "SingleChoice",
          "content": "Constants in rust can be defined in which scope?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Global",
              "key": "A",
              "order": 0
            },
            {
              "content": "Method",
              "key": "B",
              "order": 1
            },
            {
              "content": "Local",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b29fa10c-2efa-478c-8207-2e2a80af8700",
          "type": "SingleChoice",
          "content": "Which of the following are the scalar data types present in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "integers, floating-point numbers, booleans, characters",
              "key": "A",
              "order": 0
            },
            {
              "content": "integers, signed numbers, unsigned numbers, booleans, characters",
              "key": "B",
              "order": 1
            },
            {
              "content": "integers, strings, signed numbers, unsigned numbers, booleans",
              "key": "C",
              "order": 2
            },
            {
              "content": "integers, floating-point numbers, strings, booleans",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "775949c1-23b7-42bc-b184-bc755c8d2657",
          "type": "SingleChoice",
          "content": "The compound data types supported by rust are-",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays, Lists, Red-Black Trees",
              "key": "A",
              "order": 0
            },
            {
              "content": "Arrays, Lists, Vectors",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays, Tuples",
              "key": "C",
              "order": 2
            },
            {
              "content": "Arrays, Maps",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7fd341f0-4921-4e6e-aa0c-c3897f91d3b2",
          "type": "SingleChoice",
          "content": "Which are valid array declarations in rust? \n``` \n       let mut arr : {i64, 3} = [2,3,5];\n       let mut arr : {3,3};\n       let mut arr = [2,3,5];\n ```\n",
          "hint": "Look for the wrong declaration format, you may or may not find it",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Both a & b",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both b & c",
              "key": "B",
              "order": 1
            },
            {
              "content": "Only a",
              "key": "C",
              "order": 2
            },
            {
              "content": "All a, b, & c",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "75d926cd-6f05-4185-916c-fc6c2b90eecd",
          "type": "SingleChoice",
          "content": "Which of the following has low memory usage, const or static?",
          "hint": "How many of these can we update?",
          "explanation": "Constant doesn't uses any extra heap memory to update",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "const",
              "key": "A",
              "order": 0
            },
            {
              "content": "static",
              "key": "B",
              "order": 1
            },
            {
              "content": "depends upon the data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "both have the same memory usage",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a7495120-1470-41d4-aeb2-6d9d7ebd876c",
          "type": "SingleChoice",
          "content": "To use dynamic-sized variables, which of the following should be used?",
          "hint": "No hint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Arrays & Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "List all the data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "?Sized",
              "key": "C",
              "order": 2
            },
            {
              "content": "Dynamic-Sized variables not supported in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "4c564a7d-28d3-4fca-a06d-f3f3fc419d13",
          "type": "SingleChoice",
          "content": "What is the importance of the “type” keyword in rust?",
          "hint": "Used for another types.",
          "explanation": "Sets an alias of another type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "used for dynamic-sized data type",
              "key": "A",
              "order": 0
            },
            {
              "content": "used to create a template",
              "key": "B",
              "order": 1
            },
            {
              "content": "used for user-defined data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "used to set an alias of another type",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d677a228-7f5d-4b5f-8bee-9f40052efafb",
          "type": "SingleChoice",
          "content": "What is the importance of Cargo in rust?",
          "hint": "What is npm used for?",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "package-manager"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Collection of rust libraries",
              "key": "A",
              "order": 0
            },
            {
              "content": "Modules Package manager",
              "key": "B",
              "order": 1
            },
            {
              "content": "Build system and Package manager",
              "key": "C",
              "order": 2
            },
            {
              "content": "Used to create and build UI projects in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2715ab2c-35b3-4e6a-9697-f244c6e23676",
          "type": "SingleChoice",
          "content": "How to print the data type of a variable in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": " `std::any::type_name` ",
              "key": "A",
              "order": 0
            },
            {
              "content": " `variable.type_name()` ",
              "key": "B",
              "order": 1
            },
            {
              "content": " `std::intrisic::type_name` ",
              "key": "C",
              "order": 2
            },
            {
              "content": " `std::variable::type_name` ",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e326751d-bb65-44e4-a6ce-fa62faa96f94",
          "type": "SingleChoice",
          "content": "Which type cast preserves the mathematical value in all cases?",
          "hint": "NoHint",
          "explanation": "Because they can handle both signed and unsigned values, and are typecasted in one data type only.",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "i32 as i64",
              "key": "A",
              "order": 0
            },
            {
              "content": "i64 as i32",
              "key": "B",
              "order": 1
            },
            {
              "content": "usize as u64",
              "key": "C",
              "order": 2
            },
            {
              "content": "f64 as f32",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ffac79fe-2367-42d1-82eb-b6e6127aead5",
          "type": "SingleChoice",
          "content": "Which of the following cannot be destructed further into smaller segments?",
          "hint": "Think of the structures they're built upon ",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "Traits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays",
              "key": "C",
              "order": 2
            },
            {
              "content": "Structs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b0a3444-3b86-4e09-8021-f4b66cb2ce09",
          "type": "SingleChoice",
          "content": "Which comment syntax is not legal?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "<//>",
              "key": "A",
              "order": 0
            },
            {
              "content": "/* */",
              "key": "B",
              "order": 1
            },
            {
              "content": "//!",
              "key": "C",
              "order": 2
            },
            {
              "content": "//",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f9d0f0d-4670-44d7-b69f-d398ecfb3236",
          "type": "SingleChoice",
          "content": "Values of the array can be deleted.",
          "hint": "NoHint",
          "explanation": "Values can be updated, but can't be deleted",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d2af3b88-9912-4729-9673-4101b7ec4765",
          "type": "SingleChoice",
          "content": "How do you initialize every element of an array of size 5 with 0?",
          "hint": "Look at the declarations, don't get confused by the order while declaring",
          "explanation": "The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "`let mut arr : {i32;5} = {5;0};`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`let mut arr : {i32;5} = {0;5};`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`let mut arr : {5;i32} = {5;0};`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`let mut arr : {5;i32} = {0;5};`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "93c0673c-a86b-4bbb-82b0-3bb77bddab67",
          "type": "SingleChoice",
          "content": "Tuples in rust are",
          "hint": "NoHint",
          "explanation": "They can handle and store different data types",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "finite heterogeneous compound data types",
              "key": "A",
              "order": 0
            },
            {
              "content": "finite homogeneous compound data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "infinite heterogeneous compound data types",
              "key": "C",
              "order": 2
            },
            {
              "content": "infinite homogeneous compound data types",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8c7f2429-0db2-4288-bd4a-ef694b39206c",
          "type": "SingleChoice",
          "content": "What would be the output of the following code snippet?\n  ```\n    Fn main( ) {\t\n      let mut dodao_io = (\"\"Do\"\", 69, \"\"DAO\"\", 420);\n      println!(\"\"{} \"\", dodao_io );\n      println!(\"\"at 0 index = {} \"\", gfg.0 );\n    } \n  ```\n",
          "hint": "No Hint",
          "explanation": "The first print statement should've had {;?}",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & Do",
              "key": "A",
              "order": 0
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) only",
              "key": "B",
              "order": 1
            },
            {
              "content": "Compilation Error",
              "key": "C",
              "order": 2
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & “Do”",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9",
          "type": "SingleChoice",
          "content": "What is the process of temporarily making a variable mutable known as?",
          "hint": "NoHint",
          "explanation": "No explantion",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Pseudo-mutability",
              "key": "A",
              "order": 0
            },
            {
              "content": "Foreshadowing",
              "key": "B",
              "order": 1
            },
            {
              "content": "Shadowing",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overshadowing",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d8a49f56-5da8-4b71-b18c-e745d5913dee",
          "type": "SingleChoice",
          "content": "Which of the following is an example of suffix annotation?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let a_int: i64 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let a_int = i6420;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let a_int = 20i64;",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "419058bf-87e9-4c18-9b8e-3f96c3c820b3",
          "type": "SingleChoice",
          "content": "A. println!(\"1 + 2 = {}\", 1u32 + 2);\nB. println!(\"1 - 2 = {}\", 1u32 + 2);\n",
          "hint": "Solution being Positive or Negative might make a difference",
          "explanation": "Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile\n",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Only A compiles",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only B compiles",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both A & B compile",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of them complies",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d97fc146-6c06-4a5c-a738-93a00cf7214e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n\"``` println!(\"{}\", 1_00u32 + 2_0); ```\"\n",
          "hint": "NoHint",
          "explanation": "1_000u32 is similar as 100 of u32 type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Compilation Error",
              "key": "A",
              "order": 0
            },
            {
              "content": "Runtime Error",
              "key": "B",
              "order": 1
            },
            {
              "content": "3",
              "key": "C",
              "order": 2
            },
            {
              "content": "120",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2448d741-4c38-46f3-b681-c3ffb44e54ac",
          "type": "SingleChoice",
          "content": "String in standard library has more functionalities coded into it than string slice?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "923d11ba-5c1c-4d48-8101-87ee08e0fa0e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n  ```\n  fn main() {\n    let first_string = \"This is some string \".to_string();\n    let second_string = \"Let's add some Data\";\n\n    let final_string = first_string + &second_string;\n\n    println!(\"First string is: {}\", first_string);   \n    println!(\"Second string is: {}\", second_string);\n\n    println!(\"Finally we have: {}\", final_string);\n  }\n  ```\n",
          "hint": "NoHint",
          "explanation": "Syntatical Error in the code snippet",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Only 1st print statement shows an output",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only 1st and 2nd print statement shows an output",
              "key": "B",
              "order": 1
            },
            {
              "content": "All the 3 string statements show an output",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error occurs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ec5e9c9b-cafa-484e-8feb-51db5a0b7a33",
          "type": "SingleChoice",
          "content": "Which of the following operator is used by string slices to reference?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "`&`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`%`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`#`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`*`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d0b24301-eda6-49d7-bf45-88777b13e15f",
          "type": "SingleChoice",
          "content": "Select the incorrect statement from the following",
          "hint": "Nohint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Once you get a string slice from a string, then you cannot really                 modify that String anymore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Using slices to work with Strings allows us to add an extra                       security measure.",
              "key": "B",
              "order": 1
            },
            {
              "content": "If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error",
              "key": "C",
              "order": 2
            },
            {
              "content": "String Slice mutably borrows the String itself",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ef79a0da-3da6-445e-92b5-1d0e17799db6",
          "type": "SingleChoice",
          "content": "What will happen at the runtime if overflow occurs?",
          "hint": "NoHint",
          "explanation": "The memory stack is full and overflows, so a default panic occurs                 and the program crashes",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Panic and crashes the program",
              "key": "A",
              "order": 0
            },
            {
              "content": "Garbage values will be output",
              "key": "B",
              "order": 1
            },
            {
              "content": "Those values are ignored and the output is as expected",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overflow is handled already by rust, so it doesn’t occur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b152ab5-6524-49e0-b5c0-8bd5153b1ab1",
          "type": "SingleChoice",
          "content": "Character literals are specified using double quotes, as opposed to single quotes which stand for string literals.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "b49785fb-dd24-43b5-9f5a-e7dedc98cc5f",
          "type": "SingleChoice",
          "content": "Strings size is not known at compile time",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "504040ac-6167-4304-8d6e-1e559975bac5",
          "type": "SingleChoice",
          "content": "For the following code\n ```  \n   fn main() {\n     let mut x = 2.0;\n     x: i32= 3.0; \n   }\n ```\n",
          "hint": "type declaration",
          "explanation": "i32 is intialized as a float data type",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The code compiles without errors",
              "key": "A",
              "order": 0
            },
            {
              "content": "The code has errors because of immutability",
              "key": "B",
              "order": 1
            },
            {
              "content": "The code has errors because of illegal type conversion",
              "key": "C",
              "order": 2
            },
            {
              "content": "The code has errors because of no print and return statements",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b0ef2f16-b79d-433a-af54-dc218060ef13",
          "type": "SingleChoice",
          "content": "If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use",
          "hint": "Statically and Dynamic in nature",
          "explanation": "Vector is a Dynamic nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays",
              "key": "A",
              "order": 0
            },
            {
              "content": "Tuples",
              "key": "B",
              "order": 1
            },
            {
              "content": "Vectors",
              "key": "C",
              "order": 2
            },
            {
              "content": "bool type Variables",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c731455f-5296-4b1f-9aee-46a4f77c25c1",
          "type": "SingleChoice",
          "content": "BOOLEAN is a type of data type that basically gives a tautology or                fallacy.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "f8497eb4-2e55-4e70-98c9-b395f254f412",
          "type": "SingleChoice",
          "content": "What are the categories in which keywords are divided in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Weak",
              "key": "A",
              "order": 0
            },
            {
              "content": "Strict",
              "key": "B",
              "order": 1
            },
            {
              "content": "Reserved",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93",
          "type": "SingleChoice",
          "content": "Which of the following can be used as a variable name in rust?",
          "hint": "NoHint",
          "explanation": "Rest are keywords in rust",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables",
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "crate",
              "key": "A",
              "order": 0
            },
            {
              "content": "match",
              "key": "B",
              "order": 1
            },
            {
              "content": "await",
              "key": "C",
              "order": 2
            },
            {
              "content": "tuple",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "853bbf17-ceb6-4a7c-9a32-c05f048a9ce6",
          "type": "SingleChoice",
          "content": "Identify the wrong set of rust keywords",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "async, await, where, use",
              "key": "A",
              "order": 0
            },
            {
              "content": "Move, return, mut, while",
              "key": "B",
              "order": 1
            },
            {
              "content": "union, dyn, try, abstract",
              "key": "C",
              "order": 2
            },
            {
              "content": "become, box, do, incur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "118287fb-f962-4c6a-b7bb-f774e36f02bf",
          "type": "SingleChoice",
          "content": "Rust variable names can start with",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Letter, underscore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Letter, digits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Underscore, digits",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6ffbcd01-5b77-44bd-a9e1-56d3adb81a61",
          "type": "SingleChoice",
          "content": "q What is the result of the following calculation in rust \"1.0/0.0\"\n",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "A positive number",
              "key": "A",
              "order": 0
            },
            {
              "content": "A negative number",
              "key": "B",
              "order": 1
            },
            {
              "content": "An unsigned number",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e8c7d69e-3899-43aa-aaec-e45870a32a3f",
          "type": "SingleChoice",
          "content": "In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "699f89a5-4c2a-4442-afe7-eabc1fb8f5fa",
          "title": "Introduction to Blockchain Technology",
          "shortTitle": "Intro to Blockchain",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=u70_rafPs-0",
          "subTopics": [
            "variables"
          ],
          "details": "This video explains about\n* Point 1\n* Point 2\n"
        }
      ],
      "summaries": [
        {
          "title": "Typed language",
          "shortTitle": "Typed language",
          "key": "typed_language",
          "summary": "A programming language can be either a Dynamically-typed language or a Staticlly-typed language",
          "details": "- Dynamically-Typed Languages\n  * Dynamically-typed languages are the languages where the interpreter assigns variables a data type at runtime based on the variable's value at that time.\n  * Dynamic languages are usually interpreted (with some pre-processing for optimisation) so it is fast to make changes and then immediately run the updated program.\n  * Dynamically-Typed languages allows for Fast Development Cycles and Fast Start-up times.\n  * Some Examples of Dynamically Typed Languages are:- JavaScript, Python, Perl, Ruby, etc.\n- Statically-Typed Languages\n  * Statically-typed languages are the languages where variable types are known at compile time i.e. the type checking is done at compile time.\n  * Many runtime errors become compile time errors as the compiler ensures that you are writing 'correct' code. This leads to a much smoother development experience.\n  * The execution of the code will be faster compared to the dynamically-typed languages.\n  * The compiler can use the type system to provide language features that are more expressive and succinct.\n  * Some examples of Statically-Typed Languages are:- C++, Rust, C, Java, etc.\n- Rust is a Statically-Typed Language\n"
        },
        {
          "title": "Value Types",
          "shortTitle": "Value Types",
          "key": "value-types",
          "summary": "Rust has two major Data Value Types, which include \n  1. Scalar Types\n  2. Compound ypes\n",
          "details": "- Scalar Types\n  * A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.\n  - Integers\n    * An integer is a number without a fractional component.\n    * An integer can be of the following sizes:- 8-bit, 16-bit, 32-bit, 64-bit, 128-bit, arch.\n    * Integers can be either signed or unsigned. Signed and unsigned refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).\n    * Integers can be declared using keyword let, and explicitly defining the variable size and it's type of signed or unsigned integer.\n    * For example, we can declare a 64-bit signed and 32-bit unsigned integer in the following ways respectively :- \n    ```\n        1. let mut x: i64 = -20;\n        2. let mut x: u32 = 20;\n    ```\n    * The isize and usize types depend on the architecture of your build, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n    * The number literals that can be multiple numeric types allow a type suffix, such as `20u32`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000` , which will have the same value as if you had specified `1000`.\n    - Integer Overflow\n      * Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur, which can result in one of two behaviors:- \n        1. When you’re compiling in `debug` mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs.\n        2. When you’re compiling in release mode with the `--release` flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping.\n  - Floating-Point Types\n    * Floating-Point Types are number with the decimal points.\n    * Floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.\n    * All the Floating-Point Types are signed.\n    * The default Floating-Point Type is of 64-bit.\n    * The `f32` type is a single-precision float, and `f64` has double precision.\n    * We can declare a float type variable in the following ways:- \n     ```\n        fn main() {\n              let x = 2.0; // f64\n              let y: f32 = 3.0; // f32\n        }\n      ```\n  - Boolean Type\n    * There are two possible constant values:- True & False.\n    * Booleans are one byte in size.\n    * They are declared using the keyword 'bool'.\n  - Character Type\n    * Character Data Type doesn't use ASCII values like other programming languages but uses Unicode Scalar Value.\n    * It uses 4 bytes i.e. 32 bits of space for each character rather than 1 byte because of Unicode Scalar Values.\n    * We can use many more types of characters in rust, like, Chinese, emojis, etc.\n- Compound Data Types\n  * Compound types can group multiple values into one type. The two primitive compound types in rust are: Tuples and Arrays.\n  - Tuples\n    * A tuple is a general way of grouping together a number of values with a variety of types into one compound type.\n    * Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n    * Tuples are created by a comma seperated List.\n    * Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.\n    * For Example:- \n      ```\n        fn main() {\n          let tup: (i32, f64, u8) = (500, 6.4, 1);\n        }\n      ```\n    * We can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access\n    * The tuple without any values has a special name knows as \"unit\".\n    * \"unit's\" value and its corresponding type are both written () and represent an empty value or an empty return type. \n    * Expressions implicitly return the unit value if they don’t return any other value. \n  - Arrays\n    * Arrays are a collection of multiple values, stored in a single entity.\n    * Unlike a tuple, every element of an array must have the same data type.\n    * Arrays in Rust have a fixed length, i.e. they are not dynamic in nature by default.\n    * Arrays are useful when you want your data allocated on the stack rather than the memory heap.\n    * For Example:- \n      ```\n        fn main() {\n            let a: [i32; 5] = [1, 2, 3, 4, 5];\n        }\n      ```\n      Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.\n    *  We can access elements of an array using indexing, like this:\n      ```\n        fn main() {\n            let a = [1, 2, 3, 4, 5];\n        \n            let first = a[0]; // outputs 1\n            let second = a[1]; // outputs 2\n        }\n      ```\n"
        },
        {
          "title": "Variables",
          "shortTitle": "Variables",
          "key": "variables",
          "summary": "Variables are used to store the values of a particular data type.",
          "details": "- Variables and Mutability\n  * In Rust, variables are immutable in nature by default.\n  * When a variable is immutable, once a value is bound to a name, you can’t change that value\n  * To make the variables mutable, we use the keyword:- `mut`.\n  * For Example:-\n    ```\n      fn main() {\n          let mut x = 5;\n          println!(\"The value of x is: {x}\");\n          x = 6;\n          println!(\"The value of x is: {x}\");\n      }\n    ```\n- Constants\n  * Constants are values that are bound to a name and are not allowed to change, i.e. they are also immutable.\n  * Usage of keyword `mut` isn't allowed with constants.\n  * Constants are immutable by default, and also they’re always immutable.\n  * We declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated.\n  * Constants can be declared in any scope, including the global scope, making them useful for values that many parts of code need to know about.\n  * Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n  * For Example:-\n    ```\n      const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n    ```\n"
        },
        {
          "title": "Keywords",
          "shortTitle": "Keywords",
          "key": "keywords",
          "summary": "Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Rust divides keywords into three categories:\n    1. Strict\n    2. Reserved \n    3. Weak\n",
          "details": "- Strict Keywords\n  * These keywords can only be used in their correct contexts. They cannot be used as the names of: Items, Variables and function parameters, etc.\n  * For Example:- ` mut, break, else, continue, return, impl, etc. ` \n- Reserved Variables\n  * These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords.\n  * For Example:- ` abstract, try, do, final, typeof, etc. `\n- Weak Keywords\n  * These keywords have special meaning only in certain contexts.\n  * For example, it is possible to declare a variable or method with the name `union`.\n"
        },
        {
          "title": "Bit Manipulation",
          "shortTitle": "Bit Manipulation",
          "key": "bit-manupilation",
          "summary": "Bit manipulation is the process of applying logical operations on a sequence of bits to achieve a required result.",
          "details": "- Bit Mnipulation is strictly done by rust compilers for storing data in variables, for two's compliment and many other purposes.\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "strings",
          "summary": "There are two types of strings in Rust: `String` and `&str`.",
          "details": "- String\n  * Strings are formed by a list of characters, which is really an \"array of characters\".\n  * A String is stored as a vector of bytes `(Vec<u8>)`.\n  * A String is made up of three components: a pointer to some bytes, a length, and a capacity.\n  * The pointer points to an internal buffer String uses to store its data.\n  * The length is the number of bytes currently stored in the buffer, and the capacity is the size of the buffer in bytes. As such, the length will always be less than or equal to the capacity.\n  * The buffer is always stored on the heap.\n  * It is guaranteed to always be a valid `UTF-8` sequence. \n  * String is heap allocated, growable and not null terminated.\n  * We can create a String from a literal string with `String::from`\n  * We can append a char to a String with the push method, and append a &str with the `push_str` method\n- &str\n  * The str type, also called a ‘string slice’, is the most primitive string type.\n  * A &str is made up of two components: a pointer to some bytes, and a length.\n  * `&str` is `(&[u8])` that always points to a valid UTF-8 sequence.\n  * It can be used to view into a String, just like `&[T]` is a view into `Vec<T>`.\n"
        },
        {
          "title": "Package Manager",
          "shortTitle": "Package Manager",
          "key": "package-manager",
          "summary": "- A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. \n",
          "details": "- Cargo is the Rust package manager.\n"
        }
      ]
    },
    {
      "title": "Data Types",
      "key": "first-smart-contract",
      "details": "This chapter covers all in-depth knowledge about variables, mutability, and the various data types available in rust. Covered topics in this chapter\n - Variables and Immutability\n    1. How to declare variables\n    2. How mut works\n    3. Constants\n    4. Shadowing\n - Different Data Types\n    1. Scalar Data Types\n    2. Compound Data Types\n - Scalar Data Type\n    1. Integer Types\n      a. Signed and Unsigned Integers\n      b. Allowed integer sizes in rust\n      c. Declaration and Rules for Integers\n    2. Floating-Point Types\n      a. Types of Floating-points available\n      b. Declaration and Rules for Floating-Points\n    3. Boolean Types\n      a. Types of booleans\n      b. Declaration and Rules\n    4. Characters\n      a. ASCII vs Unicode Scalar Values\n      b. How character types in rust are different\n  - Compound Data Types\n    1. Arrays\n      a. When and how to use Arrays\n      b. Declaration and general rules for Arrays\n    2. Tuples\n      a. When and how to use Tuples\n      b. Declaration and general rules for Tuples\n      c. Difference between Arrays and Tuples.\n  - Strings\n    1. UTF8 set\n    2. Owned Strings: \"String\"\n    3. String Slice: \"&str\"\n    4. Difference between \"String\" and \"&str\"\n",
      "order": 1,
      "questions": [
        {
          "uuid": "ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "23a0e9e5-6c47-4512-98a5-4cd3ab6eff25",
          "type": "SingleChoice",
          "content": "Space taken by a Character data type in rust is",
          "hint": "It doesn't use ASCII values",
          "explanation": "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "1 byte",
              "key": "A",
              "order": 0
            },
            {
              "content": "4 bytes",
              "key": "B",
              "order": 1
            },
            {
              "content": "8 bytes",
              "key": "C",
              "order": 2
            },
            {
              "content": "16 bytes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "39385b22-7604-492f-9c2e-aaae409c6b79",
          "type": "SingleChoice",
          "content": "Rust is a Dynamically typed language.",
          "hint": "Does the compiler need to know the data type at compile time?",
          "explanation": "It is statically typed",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "6b844c24-f769-4662-a591-83c0a5f8c6c3",
          "type": "SingleChoice",
          "content": "Select the incorrect declaration statement",
          "hint": "NoHint",
          "explanation": "It is declared as an unsigned integer, but the value is negative",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let mut x: u32 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let mut x: i32 = -20;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let mut x: u32 = -20;",
              "key": "C",
              "order": 2
            },
            {
              "content": "let mut x = 20;",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6f2cb4ae-db4d-4c04-bfd4-37669695dab0",
          "type": "SingleChoice",
          "content": "Suppose you declared a variable as u8 and then assigned it a value of \"257\". What would be the output if it’s compiled with a \"`“--release” flag?`\"",
          "hint": "NoHint",
          "explanation": "After 255 the digits start rolling back to 0, 1 and so on",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "257",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: Integer Overflow",
              "key": "B",
              "order": 1
            },
            {
              "content": "0",
              "key": "C",
              "order": 2
            },
            {
              "content": "1",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "0708f185-46b5-45ee-ac47-3e7e1ca611b3",
          "type": "SingleChoice",
          "content": "Are Tuples in rust dynamic in nature?\n\"Eg:-\" \n``` \n  let tup: (i32, f64, bool) = (500, 6.4, true); \n```\n",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Yes",
              "key": "A",
              "order": 0
            },
            {
              "content": "No",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d11a531f-f32f-4764-a60a-2cc5af348245",
          "type": "SingleChoice",
          "content": "Select the correct statements for the two String     types(“String” and “&str”).\n \"a. “Strings” are immutable in nature and cannot be modified. \"\n \"b. “&str” is a primitive data type, whereas “String” is implemented in the standard library.\"\n \"c. To read a file into the strings, we use the read_to_string() method.\"\n",
          "hint": "NoHint",
          "explanation": "Strings are mutable in nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Only a",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both a & b",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both b & c",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "9511276a-dd19-47c4-b086-0d1de8cafedb",
          "type": "SingleChoice",
          "content": "Which among the following is not an acceptable keyword in rust?",
          "hint": "NoHint",
          "explanation": "var is not a keyword in rust",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "let",
              "key": "A",
              "order": 0
            },
            {
              "content": "var",
              "key": "B",
              "order": 1
            },
            {
              "content": "impl",
              "key": "C",
              "order": 2
            },
            {
              "content": "mut",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1ed70de2-99c6-43dd-8793-40ad702d6bff",
          "type": "SingleChoice",
          "content": "Which of the following brackets are used as placeholders in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "{}",
              "key": "A",
              "order": 0
            },
            {
              "content": "[ ]",
              "key": "B",
              "order": 1
            },
            {
              "content": "( )",
              "key": "C",
              "order": 2
            },
            {
              "content": "< >",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7f129510-4d19-4a62-bae1-34109714fa0e",
          "type": "SingleChoice",
          "content": "Constants in rust can be defined in which scope?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Global",
              "key": "A",
              "order": 0
            },
            {
              "content": "Method",
              "key": "B",
              "order": 1
            },
            {
              "content": "Local",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b29fa10c-2efa-478c-8207-2e2a80af8700",
          "type": "SingleChoice",
          "content": "Which of the following are the scalar data types present in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "integers, floating-point numbers, booleans, characters",
              "key": "A",
              "order": 0
            },
            {
              "content": "integers, signed numbers, unsigned numbers, booleans, characters",
              "key": "B",
              "order": 1
            },
            {
              "content": "integers, strings, signed numbers, unsigned numbers, booleans",
              "key": "C",
              "order": 2
            },
            {
              "content": "integers, floating-point numbers, strings, booleans",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "775949c1-23b7-42bc-b184-bc755c8d2657",
          "type": "SingleChoice",
          "content": "The compound data types supported by rust are-",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays, Lists, Red-Black Trees",
              "key": "A",
              "order": 0
            },
            {
              "content": "Arrays, Lists, Vectors",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays, Tuples",
              "key": "C",
              "order": 2
            },
            {
              "content": "Arrays, Maps",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7fd341f0-4921-4e6e-aa0c-c3897f91d3b2",
          "type": "SingleChoice",
          "content": "Which are valid array declarations in rust? \n``` \n       let mut arr : {i64, 3} = [2,3,5];\n       let mut arr : {3,3};\n       let mut arr = [2,3,5];\n ```\n",
          "hint": "Look for the wrong declaration format, you may or may not find it",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Both a & b",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both b & c",
              "key": "B",
              "order": 1
            },
            {
              "content": "Only a",
              "key": "C",
              "order": 2
            },
            {
              "content": "All a, b, & c",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "75d926cd-6f05-4185-916c-fc6c2b90eecd",
          "type": "SingleChoice",
          "content": "Which of the following has low memory usage, const or static?",
          "hint": "How many of these can we update?",
          "explanation": "Constant doesn't uses any extra heap memory to update",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "const",
              "key": "A",
              "order": 0
            },
            {
              "content": "static",
              "key": "B",
              "order": 1
            },
            {
              "content": "depends upon the data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "both have the same memory usage",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a7495120-1470-41d4-aeb2-6d9d7ebd876c",
          "type": "SingleChoice",
          "content": "To use dynamic-sized variables, which of the following should be used?",
          "hint": "No hint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Arrays & Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "List all the data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "?Sized",
              "key": "C",
              "order": 2
            },
            {
              "content": "Dynamic-Sized variables not supported in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "4c564a7d-28d3-4fca-a06d-f3f3fc419d13",
          "type": "SingleChoice",
          "content": "What is the importance of the “type” keyword in rust?",
          "hint": "Used for another types.",
          "explanation": "Sets an alias of another type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "used for dynamic-sized data type",
              "key": "A",
              "order": 0
            },
            {
              "content": "used to create a template",
              "key": "B",
              "order": 1
            },
            {
              "content": "used for user-defined data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "used to set an alias of another type",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d677a228-7f5d-4b5f-8bee-9f40052efafb",
          "type": "SingleChoice",
          "content": "What is the importance of Cargo in rust?",
          "hint": "What is npm used for?",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "package-manager"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Collection of rust libraries",
              "key": "A",
              "order": 0
            },
            {
              "content": "Modules Package manager",
              "key": "B",
              "order": 1
            },
            {
              "content": "Build system and Package manager",
              "key": "C",
              "order": 2
            },
            {
              "content": "Used to create and build UI projects in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2715ab2c-35b3-4e6a-9697-f244c6e23676",
          "type": "SingleChoice",
          "content": "How to print the data type of a variable in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": " `std::any::type_name` ",
              "key": "A",
              "order": 0
            },
            {
              "content": " `variable.type_name()` ",
              "key": "B",
              "order": 1
            },
            {
              "content": " `std::intrisic::type_name` ",
              "key": "C",
              "order": 2
            },
            {
              "content": " `std::variable::type_name` ",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e326751d-bb65-44e4-a6ce-fa62faa96f94",
          "type": "SingleChoice",
          "content": "Which type cast preserves the mathematical value in all cases?",
          "hint": "NoHint",
          "explanation": "Because they can handle both signed and unsigned values, and are typecasted in one data type only.",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "i32 as i64",
              "key": "A",
              "order": 0
            },
            {
              "content": "i64 as i32",
              "key": "B",
              "order": 1
            },
            {
              "content": "usize as u64",
              "key": "C",
              "order": 2
            },
            {
              "content": "f64 as f32",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ffac79fe-2367-42d1-82eb-b6e6127aead5",
          "type": "SingleChoice",
          "content": "Which of the following cannot be destructed further into smaller segments?",
          "hint": "Think of the structures they're built upon ",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "Traits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays",
              "key": "C",
              "order": 2
            },
            {
              "content": "Structs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b0a3444-3b86-4e09-8021-f4b66cb2ce09",
          "type": "SingleChoice",
          "content": "Which comment syntax is not legal?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "<//>",
              "key": "A",
              "order": 0
            },
            {
              "content": "/* */",
              "key": "B",
              "order": 1
            },
            {
              "content": "//!",
              "key": "C",
              "order": 2
            },
            {
              "content": "//",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f9d0f0d-4670-44d7-b69f-d398ecfb3236",
          "type": "SingleChoice",
          "content": "Values of the array can be deleted.",
          "hint": "NoHint",
          "explanation": "Values can be updated, but can't be deleted",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d2af3b88-9912-4729-9673-4101b7ec4765",
          "type": "SingleChoice",
          "content": "How do you initialize every element of an array of size 5 with 0?",
          "hint": "Look at the declarations, don't get confused by the order while declaring",
          "explanation": "The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "`let mut arr : {i32;5} = {5;0};`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`let mut arr : {i32;5} = {0;5};`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`let mut arr : {5;i32} = {5;0};`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`let mut arr : {5;i32} = {0;5};`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "93c0673c-a86b-4bbb-82b0-3bb77bddab67",
          "type": "SingleChoice",
          "content": "Tuples in rust are",
          "hint": "NoHint",
          "explanation": "They can handle and store different data types",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "finite heterogeneous compound data types",
              "key": "A",
              "order": 0
            },
            {
              "content": "finite homogeneous compound data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "infinite heterogeneous compound data types",
              "key": "C",
              "order": 2
            },
            {
              "content": "infinite homogeneous compound data types",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8c7f2429-0db2-4288-bd4a-ef694b39206c",
          "type": "SingleChoice",
          "content": "What would be the output of the following code snippet?\n  ```\n    Fn main( ) {\t\n      let mut dodao_io = (\"\"Do\"\", 69, \"\"DAO\"\", 420);\n      println!(\"\"{} \"\", dodao_io );\n      println!(\"\"at 0 index = {} \"\", gfg.0 );\n    } \n  ```\n",
          "hint": "No Hint",
          "explanation": "The first print statement should've had {;?}",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & Do",
              "key": "A",
              "order": 0
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) only",
              "key": "B",
              "order": 1
            },
            {
              "content": "Compilation Error",
              "key": "C",
              "order": 2
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & “Do”",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9",
          "type": "SingleChoice",
          "content": "What is the process of temporarily making a variable mutable known as?",
          "hint": "NoHint",
          "explanation": "No explantion",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Pseudo-mutability",
              "key": "A",
              "order": 0
            },
            {
              "content": "Foreshadowing",
              "key": "B",
              "order": 1
            },
            {
              "content": "Shadowing",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overshadowing",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d8a49f56-5da8-4b71-b18c-e745d5913dee",
          "type": "SingleChoice",
          "content": "Which of the following is an example of suffix annotation?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let a_int: i64 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let a_int = i6420;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let a_int = 20i64;",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "419058bf-87e9-4c18-9b8e-3f96c3c820b3",
          "type": "SingleChoice",
          "content": "A. println!(\"1 + 2 = {}\", 1u32 + 2);\nB. println!(\"1 - 2 = {}\", 1u32 + 2);\n",
          "hint": "Solution being Positive or Negative might make a difference",
          "explanation": "Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile\n",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Only A compiles",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only B compiles",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both A & B compile",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of them complies",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d97fc146-6c06-4a5c-a738-93a00cf7214e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n\"``` println!(\"{}\", 1_00u32 + 2_0); ```\"\n",
          "hint": "NoHint",
          "explanation": "1_000u32 is similar as 100 of u32 type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Compilation Error",
              "key": "A",
              "order": 0
            },
            {
              "content": "Runtime Error",
              "key": "B",
              "order": 1
            },
            {
              "content": "3",
              "key": "C",
              "order": 2
            },
            {
              "content": "120",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2448d741-4c38-46f3-b681-c3ffb44e54ac",
          "type": "SingleChoice",
          "content": "String in standard library has more functionalities coded into it than string slice?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "923d11ba-5c1c-4d48-8101-87ee08e0fa0e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n  ```\n  fn main() {\n    let first_string = \"This is some string \".to_string();\n    let second_string = \"Let's add some Data\";\n\n    let final_string = first_string + &second_string;\n\n    println!(\"First string is: {}\", first_string);   \n    println!(\"Second string is: {}\", second_string);\n\n    println!(\"Finally we have: {}\", final_string);\n  }\n  ```\n",
          "hint": "NoHint",
          "explanation": "Syntatical Error in the code snippet",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Only 1st print statement shows an output",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only 1st and 2nd print statement shows an output",
              "key": "B",
              "order": 1
            },
            {
              "content": "All the 3 string statements show an output",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error occurs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ec5e9c9b-cafa-484e-8feb-51db5a0b7a33",
          "type": "SingleChoice",
          "content": "Which of the following operator is used by string slices to reference?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "`&`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`%`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`#`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`*`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d0b24301-eda6-49d7-bf45-88777b13e15f",
          "type": "SingleChoice",
          "content": "Select the incorrect statement from the following",
          "hint": "Nohint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Once you get a string slice from a string, then you cannot really                 modify that String anymore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Using slices to work with Strings allows us to add an extra                       security measure.",
              "key": "B",
              "order": 1
            },
            {
              "content": "If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error",
              "key": "C",
              "order": 2
            },
            {
              "content": "String Slice mutably borrows the String itself",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ef79a0da-3da6-445e-92b5-1d0e17799db6",
          "type": "SingleChoice",
          "content": "What will happen at the runtime if overflow occurs?",
          "hint": "NoHint",
          "explanation": "The memory stack is full and overflows, so a default panic occurs                 and the program crashes",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Panic and crashes the program",
              "key": "A",
              "order": 0
            },
            {
              "content": "Garbage values will be output",
              "key": "B",
              "order": 1
            },
            {
              "content": "Those values are ignored and the output is as expected",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overflow is handled already by rust, so it doesn’t occur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b152ab5-6524-49e0-b5c0-8bd5153b1ab1",
          "type": "SingleChoice",
          "content": "Character literals are specified using double quotes, as opposed to single quotes which stand for string literals.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "b49785fb-dd24-43b5-9f5a-e7dedc98cc5f",
          "type": "SingleChoice",
          "content": "Strings size is not known at compile time",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "504040ac-6167-4304-8d6e-1e559975bac5",
          "type": "SingleChoice",
          "content": "For the following code\n ```  \n   fn main() {\n     let mut x = 2.0;\n     x: i32= 3.0; \n   }\n ```\n",
          "hint": "type declaration",
          "explanation": "i32 is intialized as a float data type",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The code compiles without errors",
              "key": "A",
              "order": 0
            },
            {
              "content": "The code has errors because of immutability",
              "key": "B",
              "order": 1
            },
            {
              "content": "The code has errors because of illegal type conversion",
              "key": "C",
              "order": 2
            },
            {
              "content": "The code has errors because of no print and return statements",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b0ef2f16-b79d-433a-af54-dc218060ef13",
          "type": "SingleChoice",
          "content": "If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use",
          "hint": "Statically and Dynamic in nature",
          "explanation": "Vector is a Dynamic nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays",
              "key": "A",
              "order": 0
            },
            {
              "content": "Tuples",
              "key": "B",
              "order": 1
            },
            {
              "content": "Vectors",
              "key": "C",
              "order": 2
            },
            {
              "content": "bool type Variables",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c731455f-5296-4b1f-9aee-46a4f77c25c1",
          "type": "SingleChoice",
          "content": "BOOLEAN is a type of data type that basically gives a tautology or                fallacy.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "f8497eb4-2e55-4e70-98c9-b395f254f412",
          "type": "SingleChoice",
          "content": "What are the categories in which keywords are divided in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Weak",
              "key": "A",
              "order": 0
            },
            {
              "content": "Strict",
              "key": "B",
              "order": 1
            },
            {
              "content": "Reserved",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93",
          "type": "SingleChoice",
          "content": "Which of the following can be used as a variable name in rust?",
          "hint": "NoHint",
          "explanation": "Rest are keywords in rust",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables",
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "crate",
              "key": "A",
              "order": 0
            },
            {
              "content": "match",
              "key": "B",
              "order": 1
            },
            {
              "content": "await",
              "key": "C",
              "order": 2
            },
            {
              "content": "tuple",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "853bbf17-ceb6-4a7c-9a32-c05f048a9ce6",
          "type": "SingleChoice",
          "content": "Identify the wrong set of rust keywords",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "async, await, where, use",
              "key": "A",
              "order": 0
            },
            {
              "content": "Move, return, mut, while",
              "key": "B",
              "order": 1
            },
            {
              "content": "union, dyn, try, abstract",
              "key": "C",
              "order": 2
            },
            {
              "content": "become, box, do, incur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "118287fb-f962-4c6a-b7bb-f774e36f02bf",
          "type": "SingleChoice",
          "content": "Rust variable names can start with",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Letter, underscore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Letter, digits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Underscore, digits",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6ffbcd01-5b77-44bd-a9e1-56d3adb81a61",
          "type": "SingleChoice",
          "content": "q What is the result of the following calculation in rust \"1.0/0.0\"\n",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "A positive number",
              "key": "A",
              "order": 0
            },
            {
              "content": "A negative number",
              "key": "B",
              "order": 1
            },
            {
              "content": "An unsigned number",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e8c7d69e-3899-43aa-aaec-e45870a32a3f",
          "type": "SingleChoice",
          "content": "In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "699f89a5-4c2a-4442-afe7-eabc1fb8f5fa",
          "title": "Introduction to Blockchain Technology",
          "shortTitle": "Intro to Blockchain",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=u70_rafPs-0",
          "subTopics": [
            "variables"
          ],
          "details": "This video explains about\n* Point 1\n* Point 2\n"
        }
      ],
      "summaries": [
        {
          "title": "Typed language",
          "shortTitle": "Typed language",
          "key": "typed_language",
          "summary": "A programming language can be either a Dynamically-typed language or a Staticlly-typed language",
          "details": "- Dynamically-Typed Languages\n  * Dynamically-typed languages are the languages where the interpreter assigns variables a data type at runtime based on the variable's value at that time.\n  * Dynamic languages are usually interpreted (with some pre-processing for optimisation) so it is fast to make changes and then immediately run the updated program.\n  * Dynamically-Typed languages allows for Fast Development Cycles and Fast Start-up times.\n  * Some Examples of Dynamically Typed Languages are:- JavaScript, Python, Perl, Ruby, etc.\n- Statically-Typed Languages\n  * Statically-typed languages are the languages where variable types are known at compile time i.e. the type checking is done at compile time.\n  * Many runtime errors become compile time errors as the compiler ensures that you are writing 'correct' code. This leads to a much smoother development experience.\n  * The execution of the code will be faster compared to the dynamically-typed languages.\n  * The compiler can use the type system to provide language features that are more expressive and succinct.\n  * Some examples of Statically-Typed Languages are:- C++, Rust, C, Java, etc.\n- Rust is a Statically-Typed Language\n"
        },
        {
          "title": "Value Types",
          "shortTitle": "Value Types",
          "key": "value-types",
          "summary": "Rust has two major Data Value Types, which include \n  1. Scalar Types\n  2. Compound ypes\n",
          "details": "- Scalar Types\n  * A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.\n  - Integers\n    * An integer is a number without a fractional component.\n    * An integer can be of the following sizes:- 8-bit, 16-bit, 32-bit, 64-bit, 128-bit, arch.\n    * Integers can be either signed or unsigned. Signed and unsigned refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).\n    * Integers can be declared using keyword let, and explicitly defining the variable size and it's type of signed or unsigned integer.\n    * For example, we can declare a 64-bit signed and 32-bit unsigned integer in the following ways respectively :- \n    ```\n        1. let mut x: i64 = -20;\n        2. let mut x: u32 = 20;\n    ```\n    * The isize and usize types depend on the architecture of your build, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n    * The number literals that can be multiple numeric types allow a type suffix, such as `20u32`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000` , which will have the same value as if you had specified `1000`.\n    - Integer Overflow\n      * Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur, which can result in one of two behaviors:- \n        1. When you’re compiling in `debug` mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs.\n        2. When you’re compiling in release mode with the `--release` flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping.\n  - Floating-Point Types\n    * Floating-Point Types are number with the decimal points.\n    * Floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.\n    * All the Floating-Point Types are signed.\n    * The default Floating-Point Type is of 64-bit.\n    * The `f32` type is a single-precision float, and `f64` has double precision.\n    * We can declare a float type variable in the following ways:- \n     ```\n        fn main() {\n              let x = 2.0; // f64\n              let y: f32 = 3.0; // f32\n        }\n      ```\n  - Boolean Type\n    * There are two possible constant values:- True & False.\n    * Booleans are one byte in size.\n    * They are declared using the keyword 'bool'.\n  - Character Type\n    * Character Data Type doesn't use ASCII values like other programming languages but uses Unicode Scalar Value.\n    * It uses 4 bytes i.e. 32 bits of space for each character rather than 1 byte because of Unicode Scalar Values.\n    * We can use many more types of characters in rust, like, Chinese, emojis, etc.\n- Compound Data Types\n  * Compound types can group multiple values into one type. The two primitive compound types in rust are: Tuples and Arrays.\n  - Tuples\n    * A tuple is a general way of grouping together a number of values with a variety of types into one compound type.\n    * Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n    * Tuples are created by a comma seperated List.\n    * Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.\n    * For Example:- \n      ```\n        fn main() {\n          let tup: (i32, f64, u8) = (500, 6.4, 1);\n        }\n      ```\n    * We can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access\n    * The tuple without any values has a special name knows as \"unit\".\n    * \"unit's\" value and its corresponding type are both written () and represent an empty value or an empty return type. \n    * Expressions implicitly return the unit value if they don’t return any other value. \n  - Arrays\n    * Arrays are a collection of multiple values, stored in a single entity.\n    * Unlike a tuple, every element of an array must have the same data type.\n    * Arrays in Rust have a fixed length, i.e. they are not dynamic in nature by default.\n    * Arrays are useful when you want your data allocated on the stack rather than the memory heap.\n    * For Example:- \n      ```\n        fn main() {\n            let a: [i32; 5] = [1, 2, 3, 4, 5];\n        }\n      ```\n      Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.\n    *  We can access elements of an array using indexing, like this:\n      ```\n        fn main() {\n            let a = [1, 2, 3, 4, 5];\n        \n            let first = a[0]; // outputs 1\n            let second = a[1]; // outputs 2\n        }\n      ```\n"
        },
        {
          "title": "Variables",
          "shortTitle": "Variables",
          "key": "variables",
          "summary": "Variables are used to store the values of a particular data type.",
          "details": "- Variables and Mutability\n  * In Rust, variables are immutable in nature by default.\n  * When a variable is immutable, once a value is bound to a name, you can’t change that value\n  * To make the variables mutable, we use the keyword:- `mut`.\n  * For Example:-\n    ```\n      fn main() {\n          let mut x = 5;\n          println!(\"The value of x is: {x}\");\n          x = 6;\n          println!(\"The value of x is: {x}\");\n      }\n    ```\n- Constants\n  * Constants are values that are bound to a name and are not allowed to change, i.e. they are also immutable.\n  * Usage of keyword `mut` isn't allowed with constants.\n  * Constants are immutable by default, and also they’re always immutable.\n  * We declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated.\n  * Constants can be declared in any scope, including the global scope, making them useful for values that many parts of code need to know about.\n  * Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n  * For Example:-\n    ```\n      const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n    ```\n"
        },
        {
          "title": "Keywords",
          "shortTitle": "Keywords",
          "key": "keywords",
          "summary": "Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Rust divides keywords into three categories:\n    1. Strict\n    2. Reserved \n    3. Weak\n",
          "details": "- Strict Keywords\n  * These keywords can only be used in their correct contexts. They cannot be used as the names of: Items, Variables and function parameters, etc.\n  * For Example:- ` mut, break, else, continue, return, impl, etc. ` \n- Reserved Variables\n  * These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords.\n  * For Example:- ` abstract, try, do, final, typeof, etc. `\n- Weak Keywords\n  * These keywords have special meaning only in certain contexts.\n  * For example, it is possible to declare a variable or method with the name `union`.\n"
        },
        {
          "title": "Bit Manipulation",
          "shortTitle": "Bit Manipulation",
          "key": "bit-manupilation",
          "summary": "Bit manipulation is the process of applying logical operations on a sequence of bits to achieve a required result.",
          "details": "- Bit Mnipulation is strictly done by rust compilers for storing data in variables, for two's compliment and many other purposes.\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "strings",
          "summary": "There are two types of strings in Rust: `String` and `&str`.",
          "details": "- String\n  * Strings are formed by a list of characters, which is really an \"array of characters\".\n  * A String is stored as a vector of bytes `(Vec<u8>)`.\n  * A String is made up of three components: a pointer to some bytes, a length, and a capacity.\n  * The pointer points to an internal buffer String uses to store its data.\n  * The length is the number of bytes currently stored in the buffer, and the capacity is the size of the buffer in bytes. As such, the length will always be less than or equal to the capacity.\n  * The buffer is always stored on the heap.\n  * It is guaranteed to always be a valid `UTF-8` sequence. \n  * String is heap allocated, growable and not null terminated.\n  * We can create a String from a literal string with `String::from`\n  * We can append a char to a String with the push method, and append a &str with the `push_str` method\n- &str\n  * The str type, also called a ‘string slice’, is the most primitive string type.\n  * A &str is made up of two components: a pointer to some bytes, and a length.\n  * `&str` is `(&[u8])` that always points to a valid UTF-8 sequence.\n  * It can be used to view into a String, just like `&[T]` is a view into `Vec<T>`.\n"
        },
        {
          "title": "Package Manager",
          "shortTitle": "Package Manager",
          "key": "package-manager",
          "summary": "- A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. \n",
          "details": "- Cargo is the Rust package manager.\n"
        }
      ]
    },
    {
      "title": "Control Flow & Functions",
      "key": "control-flow-functions",
      "details": "This chapter talks in-depth about the conditional statements, for and while loops, functions in rust, and Error handling.\n - Conditional Statements\n    1. If-Else statements\n    2. Nested If-Else, nested If statements\n    3. Match, pattern matching\n - Loops\n    1. For Loops\n      a. Nested for loops, range-based for loops\n    2. While Loops\n - Functions\n    1. Parameters, Statements\n    2. Functions with Return Values\n - Error Handling\n    1. Recoverable Errors\n      a. Option\n      b. Result\n    2. Combinators\n      a. Using combinators on Options and Results\n      b. Conversion between Options and Results\n    3. Early Returns and \"?\" operator\n    4. Non-recoverable errors\n      a. Panics\n    5. Custom Errors\n",
      "order": 2,
      "questions": [
        {
          "uuid": "ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "23a0e9e5-6c47-4512-98a5-4cd3ab6eff25",
          "type": "SingleChoice",
          "content": "Space taken by a Character data type in rust is",
          "hint": "It doesn't use ASCII values",
          "explanation": "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "1 byte",
              "key": "A",
              "order": 0
            },
            {
              "content": "4 bytes",
              "key": "B",
              "order": 1
            },
            {
              "content": "8 bytes",
              "key": "C",
              "order": 2
            },
            {
              "content": "16 bytes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "39385b22-7604-492f-9c2e-aaae409c6b79",
          "type": "SingleChoice",
          "content": "Rust is a Dynamically typed language.",
          "hint": "Does the compiler need to know the data type at compile time?",
          "explanation": "It is statically typed",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "6b844c24-f769-4662-a591-83c0a5f8c6c3",
          "type": "SingleChoice",
          "content": "Select the incorrect declaration statement",
          "hint": "NoHint",
          "explanation": "It is declared as an unsigned integer, but the value is negative",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let mut x: u32 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let mut x: i32 = -20;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let mut x: u32 = -20;",
              "key": "C",
              "order": 2
            },
            {
              "content": "let mut x = 20;",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6f2cb4ae-db4d-4c04-bfd4-37669695dab0",
          "type": "SingleChoice",
          "content": "Suppose you declared a variable as u8 and then assigned it a value of \"257\". What would be the output if it’s compiled with a \"`“--release” flag?`\"",
          "hint": "NoHint",
          "explanation": "After 255 the digits start rolling back to 0, 1 and so on",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "257",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: Integer Overflow",
              "key": "B",
              "order": 1
            },
            {
              "content": "0",
              "key": "C",
              "order": 2
            },
            {
              "content": "1",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "0708f185-46b5-45ee-ac47-3e7e1ca611b3",
          "type": "SingleChoice",
          "content": "Are Tuples in rust dynamic in nature?\n\"Eg:-\" \n``` \n  let tup: (i32, f64, bool) = (500, 6.4, true); \n```\n",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Yes",
              "key": "A",
              "order": 0
            },
            {
              "content": "No",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d11a531f-f32f-4764-a60a-2cc5af348245",
          "type": "SingleChoice",
          "content": "Select the correct statements for the two String     types(“String” and “&str”).\n \"a. “Strings” are immutable in nature and cannot be modified. \"\n \"b. “&str” is a primitive data type, whereas “String” is implemented in the standard library.\"\n \"c. To read a file into the strings, we use the read_to_string() method.\"\n",
          "hint": "NoHint",
          "explanation": "Strings are mutable in nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Only a",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both a & b",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both b & c",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "9511276a-dd19-47c4-b086-0d1de8cafedb",
          "type": "SingleChoice",
          "content": "Which among the following is not an acceptable keyword in rust?",
          "hint": "NoHint",
          "explanation": "var is not a keyword in rust",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "let",
              "key": "A",
              "order": 0
            },
            {
              "content": "var",
              "key": "B",
              "order": 1
            },
            {
              "content": "impl",
              "key": "C",
              "order": 2
            },
            {
              "content": "mut",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1ed70de2-99c6-43dd-8793-40ad702d6bff",
          "type": "SingleChoice",
          "content": "Which of the following brackets are used as placeholders in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "{}",
              "key": "A",
              "order": 0
            },
            {
              "content": "[ ]",
              "key": "B",
              "order": 1
            },
            {
              "content": "( )",
              "key": "C",
              "order": 2
            },
            {
              "content": "< >",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7f129510-4d19-4a62-bae1-34109714fa0e",
          "type": "SingleChoice",
          "content": "Constants in rust can be defined in which scope?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Global",
              "key": "A",
              "order": 0
            },
            {
              "content": "Method",
              "key": "B",
              "order": 1
            },
            {
              "content": "Local",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b29fa10c-2efa-478c-8207-2e2a80af8700",
          "type": "SingleChoice",
          "content": "Which of the following are the scalar data types present in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "integers, floating-point numbers, booleans, characters",
              "key": "A",
              "order": 0
            },
            {
              "content": "integers, signed numbers, unsigned numbers, booleans, characters",
              "key": "B",
              "order": 1
            },
            {
              "content": "integers, strings, signed numbers, unsigned numbers, booleans",
              "key": "C",
              "order": 2
            },
            {
              "content": "integers, floating-point numbers, strings, booleans",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "775949c1-23b7-42bc-b184-bc755c8d2657",
          "type": "SingleChoice",
          "content": "The compound data types supported by rust are-",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays, Lists, Red-Black Trees",
              "key": "A",
              "order": 0
            },
            {
              "content": "Arrays, Lists, Vectors",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays, Tuples",
              "key": "C",
              "order": 2
            },
            {
              "content": "Arrays, Maps",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7fd341f0-4921-4e6e-aa0c-c3897f91d3b2",
          "type": "SingleChoice",
          "content": "Which are valid array declarations in rust? \n``` \n       let mut arr : {i64, 3} = [2,3,5];\n       let mut arr : {3,3};\n       let mut arr = [2,3,5];\n ```\n",
          "hint": "Look for the wrong declaration format, you may or may not find it",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Both a & b",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both b & c",
              "key": "B",
              "order": 1
            },
            {
              "content": "Only a",
              "key": "C",
              "order": 2
            },
            {
              "content": "All a, b, & c",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "75d926cd-6f05-4185-916c-fc6c2b90eecd",
          "type": "SingleChoice",
          "content": "Which of the following has low memory usage, const or static?",
          "hint": "How many of these can we update?",
          "explanation": "Constant doesn't uses any extra heap memory to update",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "const",
              "key": "A",
              "order": 0
            },
            {
              "content": "static",
              "key": "B",
              "order": 1
            },
            {
              "content": "depends upon the data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "both have the same memory usage",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a7495120-1470-41d4-aeb2-6d9d7ebd876c",
          "type": "SingleChoice",
          "content": "To use dynamic-sized variables, which of the following should be used?",
          "hint": "No hint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Arrays & Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "List all the data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "?Sized",
              "key": "C",
              "order": 2
            },
            {
              "content": "Dynamic-Sized variables not supported in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "4c564a7d-28d3-4fca-a06d-f3f3fc419d13",
          "type": "SingleChoice",
          "content": "What is the importance of the “type” keyword in rust?",
          "hint": "Used for another types.",
          "explanation": "Sets an alias of another type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "used for dynamic-sized data type",
              "key": "A",
              "order": 0
            },
            {
              "content": "used to create a template",
              "key": "B",
              "order": 1
            },
            {
              "content": "used for user-defined data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "used to set an alias of another type",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d677a228-7f5d-4b5f-8bee-9f40052efafb",
          "type": "SingleChoice",
          "content": "What is the importance of Cargo in rust?",
          "hint": "What is npm used for?",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "package-manager"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Collection of rust libraries",
              "key": "A",
              "order": 0
            },
            {
              "content": "Modules Package manager",
              "key": "B",
              "order": 1
            },
            {
              "content": "Build system and Package manager",
              "key": "C",
              "order": 2
            },
            {
              "content": "Used to create and build UI projects in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2715ab2c-35b3-4e6a-9697-f244c6e23676",
          "type": "SingleChoice",
          "content": "How to print the data type of a variable in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": " `std::any::type_name` ",
              "key": "A",
              "order": 0
            },
            {
              "content": " `variable.type_name()` ",
              "key": "B",
              "order": 1
            },
            {
              "content": " `std::intrisic::type_name` ",
              "key": "C",
              "order": 2
            },
            {
              "content": " `std::variable::type_name` ",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e326751d-bb65-44e4-a6ce-fa62faa96f94",
          "type": "SingleChoice",
          "content": "Which type cast preserves the mathematical value in all cases?",
          "hint": "NoHint",
          "explanation": "Because they can handle both signed and unsigned values, and are typecasted in one data type only.",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "i32 as i64",
              "key": "A",
              "order": 0
            },
            {
              "content": "i64 as i32",
              "key": "B",
              "order": 1
            },
            {
              "content": "usize as u64",
              "key": "C",
              "order": 2
            },
            {
              "content": "f64 as f32",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ffac79fe-2367-42d1-82eb-b6e6127aead5",
          "type": "SingleChoice",
          "content": "Which of the following cannot be destructed further into smaller segments?",
          "hint": "Think of the structures they're built upon ",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "Traits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays",
              "key": "C",
              "order": 2
            },
            {
              "content": "Structs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b0a3444-3b86-4e09-8021-f4b66cb2ce09",
          "type": "SingleChoice",
          "content": "Which comment syntax is not legal?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "<//>",
              "key": "A",
              "order": 0
            },
            {
              "content": "/* */",
              "key": "B",
              "order": 1
            },
            {
              "content": "//!",
              "key": "C",
              "order": 2
            },
            {
              "content": "//",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f9d0f0d-4670-44d7-b69f-d398ecfb3236",
          "type": "SingleChoice",
          "content": "Values of the array can be deleted.",
          "hint": "NoHint",
          "explanation": "Values can be updated, but can't be deleted",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d2af3b88-9912-4729-9673-4101b7ec4765",
          "type": "SingleChoice",
          "content": "How do you initialize every element of an array of size 5 with 0?",
          "hint": "Look at the declarations, don't get confused by the order while declaring",
          "explanation": "The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "`let mut arr : {i32;5} = {5;0};`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`let mut arr : {i32;5} = {0;5};`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`let mut arr : {5;i32} = {5;0};`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`let mut arr : {5;i32} = {0;5};`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "93c0673c-a86b-4bbb-82b0-3bb77bddab67",
          "type": "SingleChoice",
          "content": "Tuples in rust are",
          "hint": "NoHint",
          "explanation": "They can handle and store different data types",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "finite heterogeneous compound data types",
              "key": "A",
              "order": 0
            },
            {
              "content": "finite homogeneous compound data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "infinite heterogeneous compound data types",
              "key": "C",
              "order": 2
            },
            {
              "content": "infinite homogeneous compound data types",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8c7f2429-0db2-4288-bd4a-ef694b39206c",
          "type": "SingleChoice",
          "content": "What would be the output of the following code snippet?\n  ```\n    Fn main( ) {\t\n      let mut dodao_io = (\"\"Do\"\", 69, \"\"DAO\"\", 420);\n      println!(\"\"{} \"\", dodao_io );\n      println!(\"\"at 0 index = {} \"\", gfg.0 );\n    } \n  ```\n",
          "hint": "No Hint",
          "explanation": "The first print statement should've had {;?}",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & Do",
              "key": "A",
              "order": 0
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) only",
              "key": "B",
              "order": 1
            },
            {
              "content": "Compilation Error",
              "key": "C",
              "order": 2
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & “Do”",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9",
          "type": "SingleChoice",
          "content": "What is the process of temporarily making a variable mutable known as?",
          "hint": "NoHint",
          "explanation": "No explantion",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Pseudo-mutability",
              "key": "A",
              "order": 0
            },
            {
              "content": "Foreshadowing",
              "key": "B",
              "order": 1
            },
            {
              "content": "Shadowing",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overshadowing",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d8a49f56-5da8-4b71-b18c-e745d5913dee",
          "type": "SingleChoice",
          "content": "Which of the following is an example of suffix annotation?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let a_int: i64 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let a_int = i6420;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let a_int = 20i64;",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "419058bf-87e9-4c18-9b8e-3f96c3c820b3",
          "type": "SingleChoice",
          "content": "A. println!(\"1 + 2 = {}\", 1u32 + 2);\nB. println!(\"1 - 2 = {}\", 1u32 + 2);\n",
          "hint": "Solution being Positive or Negative might make a difference",
          "explanation": "Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile\n",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Only A compiles",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only B compiles",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both A & B compile",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of them complies",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d97fc146-6c06-4a5c-a738-93a00cf7214e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n\"``` println!(\"{}\", 1_00u32 + 2_0); ```\"\n",
          "hint": "NoHint",
          "explanation": "1_000u32 is similar as 100 of u32 type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Compilation Error",
              "key": "A",
              "order": 0
            },
            {
              "content": "Runtime Error",
              "key": "B",
              "order": 1
            },
            {
              "content": "3",
              "key": "C",
              "order": 2
            },
            {
              "content": "120",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2448d741-4c38-46f3-b681-c3ffb44e54ac",
          "type": "SingleChoice",
          "content": "String in standard library has more functionalities coded into it than string slice?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "923d11ba-5c1c-4d48-8101-87ee08e0fa0e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n  ```\n  fn main() {\n    let first_string = \"This is some string \".to_string();\n    let second_string = \"Let's add some Data\";\n\n    let final_string = first_string + &second_string;\n\n    println!(\"First string is: {}\", first_string);   \n    println!(\"Second string is: {}\", second_string);\n\n    println!(\"Finally we have: {}\", final_string);\n  }\n  ```\n",
          "hint": "NoHint",
          "explanation": "Syntatical Error in the code snippet",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Only 1st print statement shows an output",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only 1st and 2nd print statement shows an output",
              "key": "B",
              "order": 1
            },
            {
              "content": "All the 3 string statements show an output",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error occurs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ec5e9c9b-cafa-484e-8feb-51db5a0b7a33",
          "type": "SingleChoice",
          "content": "Which of the following operator is used by string slices to reference?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "`&`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`%`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`#`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`*`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d0b24301-eda6-49d7-bf45-88777b13e15f",
          "type": "SingleChoice",
          "content": "Select the incorrect statement from the following",
          "hint": "Nohint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Once you get a string slice from a string, then you cannot really                 modify that String anymore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Using slices to work with Strings allows us to add an extra                       security measure.",
              "key": "B",
              "order": 1
            },
            {
              "content": "If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error",
              "key": "C",
              "order": 2
            },
            {
              "content": "String Slice mutably borrows the String itself",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ef79a0da-3da6-445e-92b5-1d0e17799db6",
          "type": "SingleChoice",
          "content": "What will happen at the runtime if overflow occurs?",
          "hint": "NoHint",
          "explanation": "The memory stack is full and overflows, so a default panic occurs                 and the program crashes",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Panic and crashes the program",
              "key": "A",
              "order": 0
            },
            {
              "content": "Garbage values will be output",
              "key": "B",
              "order": 1
            },
            {
              "content": "Those values are ignored and the output is as expected",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overflow is handled already by rust, so it doesn’t occur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b152ab5-6524-49e0-b5c0-8bd5153b1ab1",
          "type": "SingleChoice",
          "content": "Character literals are specified using double quotes, as opposed to single quotes which stand for string literals.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "b49785fb-dd24-43b5-9f5a-e7dedc98cc5f",
          "type": "SingleChoice",
          "content": "Strings size is not known at compile time",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "504040ac-6167-4304-8d6e-1e559975bac5",
          "type": "SingleChoice",
          "content": "For the following code\n ```  \n   fn main() {\n     let mut x = 2.0;\n     x: i32= 3.0; \n   }\n ```\n",
          "hint": "type declaration",
          "explanation": "i32 is intialized as a float data type",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The code compiles without errors",
              "key": "A",
              "order": 0
            },
            {
              "content": "The code has errors because of immutability",
              "key": "B",
              "order": 1
            },
            {
              "content": "The code has errors because of illegal type conversion",
              "key": "C",
              "order": 2
            },
            {
              "content": "The code has errors because of no print and return statements",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b0ef2f16-b79d-433a-af54-dc218060ef13",
          "type": "SingleChoice",
          "content": "If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use",
          "hint": "Statically and Dynamic in nature",
          "explanation": "Vector is a Dynamic nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays",
              "key": "A",
              "order": 0
            },
            {
              "content": "Tuples",
              "key": "B",
              "order": 1
            },
            {
              "content": "Vectors",
              "key": "C",
              "order": 2
            },
            {
              "content": "bool type Variables",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c731455f-5296-4b1f-9aee-46a4f77c25c1",
          "type": "SingleChoice",
          "content": "BOOLEAN is a type of data type that basically gives a tautology or                fallacy.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "f8497eb4-2e55-4e70-98c9-b395f254f412",
          "type": "SingleChoice",
          "content": "What are the categories in which keywords are divided in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Weak",
              "key": "A",
              "order": 0
            },
            {
              "content": "Strict",
              "key": "B",
              "order": 1
            },
            {
              "content": "Reserved",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93",
          "type": "SingleChoice",
          "content": "Which of the following can be used as a variable name in rust?",
          "hint": "NoHint",
          "explanation": "Rest are keywords in rust",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables",
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "crate",
              "key": "A",
              "order": 0
            },
            {
              "content": "match",
              "key": "B",
              "order": 1
            },
            {
              "content": "await",
              "key": "C",
              "order": 2
            },
            {
              "content": "tuple",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "853bbf17-ceb6-4a7c-9a32-c05f048a9ce6",
          "type": "SingleChoice",
          "content": "Identify the wrong set of rust keywords",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "async, await, where, use",
              "key": "A",
              "order": 0
            },
            {
              "content": "Move, return, mut, while",
              "key": "B",
              "order": 1
            },
            {
              "content": "union, dyn, try, abstract",
              "key": "C",
              "order": 2
            },
            {
              "content": "become, box, do, incur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "118287fb-f962-4c6a-b7bb-f774e36f02bf",
          "type": "SingleChoice",
          "content": "Rust variable names can start with",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Letter, underscore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Letter, digits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Underscore, digits",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6ffbcd01-5b77-44bd-a9e1-56d3adb81a61",
          "type": "SingleChoice",
          "content": "q What is the result of the following calculation in rust \"1.0/0.0\"\n",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "A positive number",
              "key": "A",
              "order": 0
            },
            {
              "content": "A negative number",
              "key": "B",
              "order": 1
            },
            {
              "content": "An unsigned number",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e8c7d69e-3899-43aa-aaec-e45870a32a3f",
          "type": "SingleChoice",
          "content": "In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "699f89a5-4c2a-4442-afe7-eabc1fb8f5fa",
          "title": "Introduction to Blockchain Technology",
          "shortTitle": "Intro to Blockchain",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=u70_rafPs-0",
          "subTopics": [
            "variables"
          ],
          "details": "This video explains about\n* Point 1\n* Point 2\n"
        }
      ],
      "summaries": [
        {
          "title": "Typed language",
          "shortTitle": "Typed language",
          "key": "typed_language",
          "summary": "A programming language can be either a Dynamically-typed language or a Staticlly-typed language",
          "details": "- Dynamically-Typed Languages\n  * Dynamically-typed languages are the languages where the interpreter assigns variables a data type at runtime based on the variable's value at that time.\n  * Dynamic languages are usually interpreted (with some pre-processing for optimisation) so it is fast to make changes and then immediately run the updated program.\n  * Dynamically-Typed languages allows for Fast Development Cycles and Fast Start-up times.\n  * Some Examples of Dynamically Typed Languages are:- JavaScript, Python, Perl, Ruby, etc.\n- Statically-Typed Languages\n  * Statically-typed languages are the languages where variable types are known at compile time i.e. the type checking is done at compile time.\n  * Many runtime errors become compile time errors as the compiler ensures that you are writing 'correct' code. This leads to a much smoother development experience.\n  * The execution of the code will be faster compared to the dynamically-typed languages.\n  * The compiler can use the type system to provide language features that are more expressive and succinct.\n  * Some examples of Statically-Typed Languages are:- C++, Rust, C, Java, etc.\n- Rust is a Statically-Typed Language\n"
        },
        {
          "title": "Value Types",
          "shortTitle": "Value Types",
          "key": "value-types",
          "summary": "Rust has two major Data Value Types, which include \n  1. Scalar Types\n  2. Compound ypes\n",
          "details": "- Scalar Types\n  * A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.\n  - Integers\n    * An integer is a number without a fractional component.\n    * An integer can be of the following sizes:- 8-bit, 16-bit, 32-bit, 64-bit, 128-bit, arch.\n    * Integers can be either signed or unsigned. Signed and unsigned refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).\n    * Integers can be declared using keyword let, and explicitly defining the variable size and it's type of signed or unsigned integer.\n    * For example, we can declare a 64-bit signed and 32-bit unsigned integer in the following ways respectively :- \n    ```\n        1. let mut x: i64 = -20;\n        2. let mut x: u32 = 20;\n    ```\n    * The isize and usize types depend on the architecture of your build, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n    * The number literals that can be multiple numeric types allow a type suffix, such as `20u32`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000` , which will have the same value as if you had specified `1000`.\n    - Integer Overflow\n      * Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur, which can result in one of two behaviors:- \n        1. When you’re compiling in `debug` mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs.\n        2. When you’re compiling in release mode with the `--release` flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping.\n  - Floating-Point Types\n    * Floating-Point Types are number with the decimal points.\n    * Floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.\n    * All the Floating-Point Types are signed.\n    * The default Floating-Point Type is of 64-bit.\n    * The `f32` type is a single-precision float, and `f64` has double precision.\n    * We can declare a float type variable in the following ways:- \n     ```\n        fn main() {\n              let x = 2.0; // f64\n              let y: f32 = 3.0; // f32\n        }\n      ```\n  - Boolean Type\n    * There are two possible constant values:- True & False.\n    * Booleans are one byte in size.\n    * They are declared using the keyword 'bool'.\n  - Character Type\n    * Character Data Type doesn't use ASCII values like other programming languages but uses Unicode Scalar Value.\n    * It uses 4 bytes i.e. 32 bits of space for each character rather than 1 byte because of Unicode Scalar Values.\n    * We can use many more types of characters in rust, like, Chinese, emojis, etc.\n- Compound Data Types\n  * Compound types can group multiple values into one type. The two primitive compound types in rust are: Tuples and Arrays.\n  - Tuples\n    * A tuple is a general way of grouping together a number of values with a variety of types into one compound type.\n    * Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n    * Tuples are created by a comma seperated List.\n    * Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.\n    * For Example:- \n      ```\n        fn main() {\n          let tup: (i32, f64, u8) = (500, 6.4, 1);\n        }\n      ```\n    * We can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access\n    * The tuple without any values has a special name knows as \"unit\".\n    * \"unit's\" value and its corresponding type are both written () and represent an empty value or an empty return type. \n    * Expressions implicitly return the unit value if they don’t return any other value. \n  - Arrays\n    * Arrays are a collection of multiple values, stored in a single entity.\n    * Unlike a tuple, every element of an array must have the same data type.\n    * Arrays in Rust have a fixed length, i.e. they are not dynamic in nature by default.\n    * Arrays are useful when you want your data allocated on the stack rather than the memory heap.\n    * For Example:- \n      ```\n        fn main() {\n            let a: [i32; 5] = [1, 2, 3, 4, 5];\n        }\n      ```\n      Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.\n    *  We can access elements of an array using indexing, like this:\n      ```\n        fn main() {\n            let a = [1, 2, 3, 4, 5];\n        \n            let first = a[0]; // outputs 1\n            let second = a[1]; // outputs 2\n        }\n      ```\n"
        },
        {
          "title": "Variables",
          "shortTitle": "Variables",
          "key": "variables",
          "summary": "Variables are used to store the values of a particular data type.",
          "details": "- Variables and Mutability\n  * In Rust, variables are immutable in nature by default.\n  * When a variable is immutable, once a value is bound to a name, you can’t change that value\n  * To make the variables mutable, we use the keyword:- `mut`.\n  * For Example:-\n    ```\n      fn main() {\n          let mut x = 5;\n          println!(\"The value of x is: {x}\");\n          x = 6;\n          println!(\"The value of x is: {x}\");\n      }\n    ```\n- Constants\n  * Constants are values that are bound to a name and are not allowed to change, i.e. they are also immutable.\n  * Usage of keyword `mut` isn't allowed with constants.\n  * Constants are immutable by default, and also they’re always immutable.\n  * We declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated.\n  * Constants can be declared in any scope, including the global scope, making them useful for values that many parts of code need to know about.\n  * Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n  * For Example:-\n    ```\n      const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n    ```\n"
        },
        {
          "title": "Keywords",
          "shortTitle": "Keywords",
          "key": "keywords",
          "summary": "Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Rust divides keywords into three categories:\n    1. Strict\n    2. Reserved \n    3. Weak\n",
          "details": "- Strict Keywords\n  * These keywords can only be used in their correct contexts. They cannot be used as the names of: Items, Variables and function parameters, etc.\n  * For Example:- ` mut, break, else, continue, return, impl, etc. ` \n- Reserved Variables\n  * These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords.\n  * For Example:- ` abstract, try, do, final, typeof, etc. `\n- Weak Keywords\n  * These keywords have special meaning only in certain contexts.\n  * For example, it is possible to declare a variable or method with the name `union`.\n"
        },
        {
          "title": "Bit Manipulation",
          "shortTitle": "Bit Manipulation",
          "key": "bit-manupilation",
          "summary": "Bit manipulation is the process of applying logical operations on a sequence of bits to achieve a required result.",
          "details": "- Bit Mnipulation is strictly done by rust compilers for storing data in variables, for two's compliment and many other purposes.\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "strings",
          "summary": "There are two types of strings in Rust: `String` and `&str`.",
          "details": "- String\n  * Strings are formed by a list of characters, which is really an \"array of characters\".\n  * A String is stored as a vector of bytes `(Vec<u8>)`.\n  * A String is made up of three components: a pointer to some bytes, a length, and a capacity.\n  * The pointer points to an internal buffer String uses to store its data.\n  * The length is the number of bytes currently stored in the buffer, and the capacity is the size of the buffer in bytes. As such, the length will always be less than or equal to the capacity.\n  * The buffer is always stored on the heap.\n  * It is guaranteed to always be a valid `UTF-8` sequence. \n  * String is heap allocated, growable and not null terminated.\n  * We can create a String from a literal string with `String::from`\n  * We can append a char to a String with the push method, and append a &str with the `push_str` method\n- &str\n  * The str type, also called a ‘string slice’, is the most primitive string type.\n  * A &str is made up of two components: a pointer to some bytes, and a length.\n  * `&str` is `(&[u8])` that always points to a valid UTF-8 sequence.\n  * It can be used to view into a String, just like `&[T]` is a view into `Vec<T>`.\n"
        },
        {
          "title": "Package Manager",
          "shortTitle": "Package Manager",
          "key": "package-manager",
          "summary": "- A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. \n",
          "details": "- Cargo is the Rust package manager.\n"
        }
      ]
    },
    {
      "title": "OOPS(Object Oriented Programming)",
      "key": "oops",
      "details": "This chapter covers all the important object oriented programming concepts with rust.\n - Structs\n    1. Introduction and Defining a Struct\n    2. Different types of structs\n      a. Classic\n      b. Tuple\n      c. Unit\n    3. Creating new instances of a struct\n    4. Destructing\n - Enums\n    1. Introduction and Defining Enums\n    2. Declaring Enums using types\n    3. Option and Result type Enums\n      a. Option Enum Advantages over NULL values\n    4. Difference between Enums and Strcuts\n - Traits\n    1. Introduction and Defining Traits\n    2. Different Types of Traits\n      a. Marker\n      b. Simple\n      c. Generic\n      d. Associated\n      e. Inherited\n    3. Trait Bounds\n      a. Trait Bounds on types\n      b. on generic functions, \n      c. on impl blocks, \n      d. ‘+’ to compose trait bounds\n    4. Standard Library Traits\n    5. Polymorphism using trait objects \n      a. Dispatch\n      b. Trait Objects\n",
      "order": 3,
      "questions": [
        {
          "uuid": "ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "23a0e9e5-6c47-4512-98a5-4cd3ab6eff25",
          "type": "SingleChoice",
          "content": "Space taken by a Character data type in rust is",
          "hint": "It doesn't use ASCII values",
          "explanation": "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "1 byte",
              "key": "A",
              "order": 0
            },
            {
              "content": "4 bytes",
              "key": "B",
              "order": 1
            },
            {
              "content": "8 bytes",
              "key": "C",
              "order": 2
            },
            {
              "content": "16 bytes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "39385b22-7604-492f-9c2e-aaae409c6b79",
          "type": "SingleChoice",
          "content": "Rust is a Dynamically typed language.",
          "hint": "Does the compiler need to know the data type at compile time?",
          "explanation": "It is statically typed",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "6b844c24-f769-4662-a591-83c0a5f8c6c3",
          "type": "SingleChoice",
          "content": "Select the incorrect declaration statement",
          "hint": "NoHint",
          "explanation": "It is declared as an unsigned integer, but the value is negative",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let mut x: u32 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let mut x: i32 = -20;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let mut x: u32 = -20;",
              "key": "C",
              "order": 2
            },
            {
              "content": "let mut x = 20;",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6f2cb4ae-db4d-4c04-bfd4-37669695dab0",
          "type": "SingleChoice",
          "content": "Suppose you declared a variable as u8 and then assigned it a value of \"257\". What would be the output if it’s compiled with a \"`“--release” flag?`\"",
          "hint": "NoHint",
          "explanation": "After 255 the digits start rolling back to 0, 1 and so on",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "257",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: Integer Overflow",
              "key": "B",
              "order": 1
            },
            {
              "content": "0",
              "key": "C",
              "order": 2
            },
            {
              "content": "1",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "0708f185-46b5-45ee-ac47-3e7e1ca611b3",
          "type": "SingleChoice",
          "content": "Are Tuples in rust dynamic in nature?\n\"Eg:-\" \n``` \n  let tup: (i32, f64, bool) = (500, 6.4, true); \n```\n",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Yes",
              "key": "A",
              "order": 0
            },
            {
              "content": "No",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d11a531f-f32f-4764-a60a-2cc5af348245",
          "type": "SingleChoice",
          "content": "Select the correct statements for the two String     types(“String” and “&str”).\n \"a. “Strings” are immutable in nature and cannot be modified. \"\n \"b. “&str” is a primitive data type, whereas “String” is implemented in the standard library.\"\n \"c. To read a file into the strings, we use the read_to_string() method.\"\n",
          "hint": "NoHint",
          "explanation": "Strings are mutable in nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Only a",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both a & b",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both b & c",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "9511276a-dd19-47c4-b086-0d1de8cafedb",
          "type": "SingleChoice",
          "content": "Which among the following is not an acceptable keyword in rust?",
          "hint": "NoHint",
          "explanation": "var is not a keyword in rust",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "let",
              "key": "A",
              "order": 0
            },
            {
              "content": "var",
              "key": "B",
              "order": 1
            },
            {
              "content": "impl",
              "key": "C",
              "order": 2
            },
            {
              "content": "mut",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1ed70de2-99c6-43dd-8793-40ad702d6bff",
          "type": "SingleChoice",
          "content": "Which of the following brackets are used as placeholders in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "{}",
              "key": "A",
              "order": 0
            },
            {
              "content": "[ ]",
              "key": "B",
              "order": 1
            },
            {
              "content": "( )",
              "key": "C",
              "order": 2
            },
            {
              "content": "< >",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7f129510-4d19-4a62-bae1-34109714fa0e",
          "type": "SingleChoice",
          "content": "Constants in rust can be defined in which scope?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Global",
              "key": "A",
              "order": 0
            },
            {
              "content": "Method",
              "key": "B",
              "order": 1
            },
            {
              "content": "Local",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b29fa10c-2efa-478c-8207-2e2a80af8700",
          "type": "SingleChoice",
          "content": "Which of the following are the scalar data types present in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "integers, floating-point numbers, booleans, characters",
              "key": "A",
              "order": 0
            },
            {
              "content": "integers, signed numbers, unsigned numbers, booleans, characters",
              "key": "B",
              "order": 1
            },
            {
              "content": "integers, strings, signed numbers, unsigned numbers, booleans",
              "key": "C",
              "order": 2
            },
            {
              "content": "integers, floating-point numbers, strings, booleans",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "775949c1-23b7-42bc-b184-bc755c8d2657",
          "type": "SingleChoice",
          "content": "The compound data types supported by rust are-",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays, Lists, Red-Black Trees",
              "key": "A",
              "order": 0
            },
            {
              "content": "Arrays, Lists, Vectors",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays, Tuples",
              "key": "C",
              "order": 2
            },
            {
              "content": "Arrays, Maps",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7fd341f0-4921-4e6e-aa0c-c3897f91d3b2",
          "type": "SingleChoice",
          "content": "Which are valid array declarations in rust? \n``` \n       let mut arr : {i64, 3} = [2,3,5];\n       let mut arr : {3,3};\n       let mut arr = [2,3,5];\n ```\n",
          "hint": "Look for the wrong declaration format, you may or may not find it",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Both a & b",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both b & c",
              "key": "B",
              "order": 1
            },
            {
              "content": "Only a",
              "key": "C",
              "order": 2
            },
            {
              "content": "All a, b, & c",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "75d926cd-6f05-4185-916c-fc6c2b90eecd",
          "type": "SingleChoice",
          "content": "Which of the following has low memory usage, const or static?",
          "hint": "How many of these can we update?",
          "explanation": "Constant doesn't uses any extra heap memory to update",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "const",
              "key": "A",
              "order": 0
            },
            {
              "content": "static",
              "key": "B",
              "order": 1
            },
            {
              "content": "depends upon the data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "both have the same memory usage",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a7495120-1470-41d4-aeb2-6d9d7ebd876c",
          "type": "SingleChoice",
          "content": "To use dynamic-sized variables, which of the following should be used?",
          "hint": "No hint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Arrays & Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "List all the data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "?Sized",
              "key": "C",
              "order": 2
            },
            {
              "content": "Dynamic-Sized variables not supported in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "4c564a7d-28d3-4fca-a06d-f3f3fc419d13",
          "type": "SingleChoice",
          "content": "What is the importance of the “type” keyword in rust?",
          "hint": "Used for another types.",
          "explanation": "Sets an alias of another type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "used for dynamic-sized data type",
              "key": "A",
              "order": 0
            },
            {
              "content": "used to create a template",
              "key": "B",
              "order": 1
            },
            {
              "content": "used for user-defined data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "used to set an alias of another type",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d677a228-7f5d-4b5f-8bee-9f40052efafb",
          "type": "SingleChoice",
          "content": "What is the importance of Cargo in rust?",
          "hint": "What is npm used for?",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "package-manager"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Collection of rust libraries",
              "key": "A",
              "order": 0
            },
            {
              "content": "Modules Package manager",
              "key": "B",
              "order": 1
            },
            {
              "content": "Build system and Package manager",
              "key": "C",
              "order": 2
            },
            {
              "content": "Used to create and build UI projects in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2715ab2c-35b3-4e6a-9697-f244c6e23676",
          "type": "SingleChoice",
          "content": "How to print the data type of a variable in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": " `std::any::type_name` ",
              "key": "A",
              "order": 0
            },
            {
              "content": " `variable.type_name()` ",
              "key": "B",
              "order": 1
            },
            {
              "content": " `std::intrisic::type_name` ",
              "key": "C",
              "order": 2
            },
            {
              "content": " `std::variable::type_name` ",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e326751d-bb65-44e4-a6ce-fa62faa96f94",
          "type": "SingleChoice",
          "content": "Which type cast preserves the mathematical value in all cases?",
          "hint": "NoHint",
          "explanation": "Because they can handle both signed and unsigned values, and are typecasted in one data type only.",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "i32 as i64",
              "key": "A",
              "order": 0
            },
            {
              "content": "i64 as i32",
              "key": "B",
              "order": 1
            },
            {
              "content": "usize as u64",
              "key": "C",
              "order": 2
            },
            {
              "content": "f64 as f32",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ffac79fe-2367-42d1-82eb-b6e6127aead5",
          "type": "SingleChoice",
          "content": "Which of the following cannot be destructed further into smaller segments?",
          "hint": "Think of the structures they're built upon ",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "Traits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays",
              "key": "C",
              "order": 2
            },
            {
              "content": "Structs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b0a3444-3b86-4e09-8021-f4b66cb2ce09",
          "type": "SingleChoice",
          "content": "Which comment syntax is not legal?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "<//>",
              "key": "A",
              "order": 0
            },
            {
              "content": "/* */",
              "key": "B",
              "order": 1
            },
            {
              "content": "//!",
              "key": "C",
              "order": 2
            },
            {
              "content": "//",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f9d0f0d-4670-44d7-b69f-d398ecfb3236",
          "type": "SingleChoice",
          "content": "Values of the array can be deleted.",
          "hint": "NoHint",
          "explanation": "Values can be updated, but can't be deleted",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d2af3b88-9912-4729-9673-4101b7ec4765",
          "type": "SingleChoice",
          "content": "How do you initialize every element of an array of size 5 with 0?",
          "hint": "Look at the declarations, don't get confused by the order while declaring",
          "explanation": "The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "`let mut arr : {i32;5} = {5;0};`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`let mut arr : {i32;5} = {0;5};`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`let mut arr : {5;i32} = {5;0};`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`let mut arr : {5;i32} = {0;5};`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "93c0673c-a86b-4bbb-82b0-3bb77bddab67",
          "type": "SingleChoice",
          "content": "Tuples in rust are",
          "hint": "NoHint",
          "explanation": "They can handle and store different data types",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "finite heterogeneous compound data types",
              "key": "A",
              "order": 0
            },
            {
              "content": "finite homogeneous compound data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "infinite heterogeneous compound data types",
              "key": "C",
              "order": 2
            },
            {
              "content": "infinite homogeneous compound data types",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8c7f2429-0db2-4288-bd4a-ef694b39206c",
          "type": "SingleChoice",
          "content": "What would be the output of the following code snippet?\n  ```\n    Fn main( ) {\t\n      let mut dodao_io = (\"\"Do\"\", 69, \"\"DAO\"\", 420);\n      println!(\"\"{} \"\", dodao_io );\n      println!(\"\"at 0 index = {} \"\", gfg.0 );\n    } \n  ```\n",
          "hint": "No Hint",
          "explanation": "The first print statement should've had {;?}",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & Do",
              "key": "A",
              "order": 0
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) only",
              "key": "B",
              "order": 1
            },
            {
              "content": "Compilation Error",
              "key": "C",
              "order": 2
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & “Do”",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9",
          "type": "SingleChoice",
          "content": "What is the process of temporarily making a variable mutable known as?",
          "hint": "NoHint",
          "explanation": "No explantion",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Pseudo-mutability",
              "key": "A",
              "order": 0
            },
            {
              "content": "Foreshadowing",
              "key": "B",
              "order": 1
            },
            {
              "content": "Shadowing",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overshadowing",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d8a49f56-5da8-4b71-b18c-e745d5913dee",
          "type": "SingleChoice",
          "content": "Which of the following is an example of suffix annotation?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let a_int: i64 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let a_int = i6420;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let a_int = 20i64;",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "419058bf-87e9-4c18-9b8e-3f96c3c820b3",
          "type": "SingleChoice",
          "content": "A. println!(\"1 + 2 = {}\", 1u32 + 2);\nB. println!(\"1 - 2 = {}\", 1u32 + 2);\n",
          "hint": "Solution being Positive or Negative might make a difference",
          "explanation": "Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile\n",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Only A compiles",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only B compiles",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both A & B compile",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of them complies",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d97fc146-6c06-4a5c-a738-93a00cf7214e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n\"``` println!(\"{}\", 1_00u32 + 2_0); ```\"\n",
          "hint": "NoHint",
          "explanation": "1_000u32 is similar as 100 of u32 type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Compilation Error",
              "key": "A",
              "order": 0
            },
            {
              "content": "Runtime Error",
              "key": "B",
              "order": 1
            },
            {
              "content": "3",
              "key": "C",
              "order": 2
            },
            {
              "content": "120",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2448d741-4c38-46f3-b681-c3ffb44e54ac",
          "type": "SingleChoice",
          "content": "String in standard library has more functionalities coded into it than string slice?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "923d11ba-5c1c-4d48-8101-87ee08e0fa0e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n  ```\n  fn main() {\n    let first_string = \"This is some string \".to_string();\n    let second_string = \"Let's add some Data\";\n\n    let final_string = first_string + &second_string;\n\n    println!(\"First string is: {}\", first_string);   \n    println!(\"Second string is: {}\", second_string);\n\n    println!(\"Finally we have: {}\", final_string);\n  }\n  ```\n",
          "hint": "NoHint",
          "explanation": "Syntatical Error in the code snippet",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Only 1st print statement shows an output",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only 1st and 2nd print statement shows an output",
              "key": "B",
              "order": 1
            },
            {
              "content": "All the 3 string statements show an output",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error occurs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ec5e9c9b-cafa-484e-8feb-51db5a0b7a33",
          "type": "SingleChoice",
          "content": "Which of the following operator is used by string slices to reference?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "`&`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`%`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`#`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`*`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d0b24301-eda6-49d7-bf45-88777b13e15f",
          "type": "SingleChoice",
          "content": "Select the incorrect statement from the following",
          "hint": "Nohint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Once you get a string slice from a string, then you cannot really                 modify that String anymore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Using slices to work with Strings allows us to add an extra                       security measure.",
              "key": "B",
              "order": 1
            },
            {
              "content": "If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error",
              "key": "C",
              "order": 2
            },
            {
              "content": "String Slice mutably borrows the String itself",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ef79a0da-3da6-445e-92b5-1d0e17799db6",
          "type": "SingleChoice",
          "content": "What will happen at the runtime if overflow occurs?",
          "hint": "NoHint",
          "explanation": "The memory stack is full and overflows, so a default panic occurs                 and the program crashes",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Panic and crashes the program",
              "key": "A",
              "order": 0
            },
            {
              "content": "Garbage values will be output",
              "key": "B",
              "order": 1
            },
            {
              "content": "Those values are ignored and the output is as expected",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overflow is handled already by rust, so it doesn’t occur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b152ab5-6524-49e0-b5c0-8bd5153b1ab1",
          "type": "SingleChoice",
          "content": "Character literals are specified using double quotes, as opposed to single quotes which stand for string literals.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "b49785fb-dd24-43b5-9f5a-e7dedc98cc5f",
          "type": "SingleChoice",
          "content": "Strings size is not known at compile time",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "504040ac-6167-4304-8d6e-1e559975bac5",
          "type": "SingleChoice",
          "content": "For the following code\n ```  \n   fn main() {\n     let mut x = 2.0;\n     x: i32= 3.0; \n   }\n ```\n",
          "hint": "type declaration",
          "explanation": "i32 is intialized as a float data type",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The code compiles without errors",
              "key": "A",
              "order": 0
            },
            {
              "content": "The code has errors because of immutability",
              "key": "B",
              "order": 1
            },
            {
              "content": "The code has errors because of illegal type conversion",
              "key": "C",
              "order": 2
            },
            {
              "content": "The code has errors because of no print and return statements",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b0ef2f16-b79d-433a-af54-dc218060ef13",
          "type": "SingleChoice",
          "content": "If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use",
          "hint": "Statically and Dynamic in nature",
          "explanation": "Vector is a Dynamic nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays",
              "key": "A",
              "order": 0
            },
            {
              "content": "Tuples",
              "key": "B",
              "order": 1
            },
            {
              "content": "Vectors",
              "key": "C",
              "order": 2
            },
            {
              "content": "bool type Variables",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c731455f-5296-4b1f-9aee-46a4f77c25c1",
          "type": "SingleChoice",
          "content": "BOOLEAN is a type of data type that basically gives a tautology or                fallacy.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "f8497eb4-2e55-4e70-98c9-b395f254f412",
          "type": "SingleChoice",
          "content": "What are the categories in which keywords are divided in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Weak",
              "key": "A",
              "order": 0
            },
            {
              "content": "Strict",
              "key": "B",
              "order": 1
            },
            {
              "content": "Reserved",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93",
          "type": "SingleChoice",
          "content": "Which of the following can be used as a variable name in rust?",
          "hint": "NoHint",
          "explanation": "Rest are keywords in rust",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables",
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "crate",
              "key": "A",
              "order": 0
            },
            {
              "content": "match",
              "key": "B",
              "order": 1
            },
            {
              "content": "await",
              "key": "C",
              "order": 2
            },
            {
              "content": "tuple",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "853bbf17-ceb6-4a7c-9a32-c05f048a9ce6",
          "type": "SingleChoice",
          "content": "Identify the wrong set of rust keywords",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "async, await, where, use",
              "key": "A",
              "order": 0
            },
            {
              "content": "Move, return, mut, while",
              "key": "B",
              "order": 1
            },
            {
              "content": "union, dyn, try, abstract",
              "key": "C",
              "order": 2
            },
            {
              "content": "become, box, do, incur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "118287fb-f962-4c6a-b7bb-f774e36f02bf",
          "type": "SingleChoice",
          "content": "Rust variable names can start with",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Letter, underscore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Letter, digits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Underscore, digits",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6ffbcd01-5b77-44bd-a9e1-56d3adb81a61",
          "type": "SingleChoice",
          "content": "q What is the result of the following calculation in rust \"1.0/0.0\"\n",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "A positive number",
              "key": "A",
              "order": 0
            },
            {
              "content": "A negative number",
              "key": "B",
              "order": 1
            },
            {
              "content": "An unsigned number",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e8c7d69e-3899-43aa-aaec-e45870a32a3f",
          "type": "SingleChoice",
          "content": "In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "699f89a5-4c2a-4442-afe7-eabc1fb8f5fa",
          "title": "Introduction to Blockchain Technology",
          "shortTitle": "Intro to Blockchain",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=u70_rafPs-0",
          "subTopics": [
            "variables"
          ],
          "details": "This video explains about\n* Point 1\n* Point 2\n"
        }
      ],
      "summaries": [
        {
          "title": "Typed language",
          "shortTitle": "Typed language",
          "key": "typed_language",
          "summary": "A programming language can be either a Dynamically-typed language or a Staticlly-typed language",
          "details": "- Dynamically-Typed Languages\n  * Dynamically-typed languages are the languages where the interpreter assigns variables a data type at runtime based on the variable's value at that time.\n  * Dynamic languages are usually interpreted (with some pre-processing for optimisation) so it is fast to make changes and then immediately run the updated program.\n  * Dynamically-Typed languages allows for Fast Development Cycles and Fast Start-up times.\n  * Some Examples of Dynamically Typed Languages are:- JavaScript, Python, Perl, Ruby, etc.\n- Statically-Typed Languages\n  * Statically-typed languages are the languages where variable types are known at compile time i.e. the type checking is done at compile time.\n  * Many runtime errors become compile time errors as the compiler ensures that you are writing 'correct' code. This leads to a much smoother development experience.\n  * The execution of the code will be faster compared to the dynamically-typed languages.\n  * The compiler can use the type system to provide language features that are more expressive and succinct.\n  * Some examples of Statically-Typed Languages are:- C++, Rust, C, Java, etc.\n- Rust is a Statically-Typed Language\n"
        },
        {
          "title": "Value Types",
          "shortTitle": "Value Types",
          "key": "value-types",
          "summary": "Rust has two major Data Value Types, which include \n  1. Scalar Types\n  2. Compound ypes\n",
          "details": "- Scalar Types\n  * A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.\n  - Integers\n    * An integer is a number without a fractional component.\n    * An integer can be of the following sizes:- 8-bit, 16-bit, 32-bit, 64-bit, 128-bit, arch.\n    * Integers can be either signed or unsigned. Signed and unsigned refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).\n    * Integers can be declared using keyword let, and explicitly defining the variable size and it's type of signed or unsigned integer.\n    * For example, we can declare a 64-bit signed and 32-bit unsigned integer in the following ways respectively :- \n    ```\n        1. let mut x: i64 = -20;\n        2. let mut x: u32 = 20;\n    ```\n    * The isize and usize types depend on the architecture of your build, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n    * The number literals that can be multiple numeric types allow a type suffix, such as `20u32`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000` , which will have the same value as if you had specified `1000`.\n    - Integer Overflow\n      * Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur, which can result in one of two behaviors:- \n        1. When you’re compiling in `debug` mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs.\n        2. When you’re compiling in release mode with the `--release` flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping.\n  - Floating-Point Types\n    * Floating-Point Types are number with the decimal points.\n    * Floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.\n    * All the Floating-Point Types are signed.\n    * The default Floating-Point Type is of 64-bit.\n    * The `f32` type is a single-precision float, and `f64` has double precision.\n    * We can declare a float type variable in the following ways:- \n     ```\n        fn main() {\n              let x = 2.0; // f64\n              let y: f32 = 3.0; // f32\n        }\n      ```\n  - Boolean Type\n    * There are two possible constant values:- True & False.\n    * Booleans are one byte in size.\n    * They are declared using the keyword 'bool'.\n  - Character Type\n    * Character Data Type doesn't use ASCII values like other programming languages but uses Unicode Scalar Value.\n    * It uses 4 bytes i.e. 32 bits of space for each character rather than 1 byte because of Unicode Scalar Values.\n    * We can use many more types of characters in rust, like, Chinese, emojis, etc.\n- Compound Data Types\n  * Compound types can group multiple values into one type. The two primitive compound types in rust are: Tuples and Arrays.\n  - Tuples\n    * A tuple is a general way of grouping together a number of values with a variety of types into one compound type.\n    * Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n    * Tuples are created by a comma seperated List.\n    * Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.\n    * For Example:- \n      ```\n        fn main() {\n          let tup: (i32, f64, u8) = (500, 6.4, 1);\n        }\n      ```\n    * We can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access\n    * The tuple without any values has a special name knows as \"unit\".\n    * \"unit's\" value and its corresponding type are both written () and represent an empty value or an empty return type. \n    * Expressions implicitly return the unit value if they don’t return any other value. \n  - Arrays\n    * Arrays are a collection of multiple values, stored in a single entity.\n    * Unlike a tuple, every element of an array must have the same data type.\n    * Arrays in Rust have a fixed length, i.e. they are not dynamic in nature by default.\n    * Arrays are useful when you want your data allocated on the stack rather than the memory heap.\n    * For Example:- \n      ```\n        fn main() {\n            let a: [i32; 5] = [1, 2, 3, 4, 5];\n        }\n      ```\n      Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.\n    *  We can access elements of an array using indexing, like this:\n      ```\n        fn main() {\n            let a = [1, 2, 3, 4, 5];\n        \n            let first = a[0]; // outputs 1\n            let second = a[1]; // outputs 2\n        }\n      ```\n"
        },
        {
          "title": "Variables",
          "shortTitle": "Variables",
          "key": "variables",
          "summary": "Variables are used to store the values of a particular data type.",
          "details": "- Variables and Mutability\n  * In Rust, variables are immutable in nature by default.\n  * When a variable is immutable, once a value is bound to a name, you can’t change that value\n  * To make the variables mutable, we use the keyword:- `mut`.\n  * For Example:-\n    ```\n      fn main() {\n          let mut x = 5;\n          println!(\"The value of x is: {x}\");\n          x = 6;\n          println!(\"The value of x is: {x}\");\n      }\n    ```\n- Constants\n  * Constants are values that are bound to a name and are not allowed to change, i.e. they are also immutable.\n  * Usage of keyword `mut` isn't allowed with constants.\n  * Constants are immutable by default, and also they’re always immutable.\n  * We declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated.\n  * Constants can be declared in any scope, including the global scope, making them useful for values that many parts of code need to know about.\n  * Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n  * For Example:-\n    ```\n      const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n    ```\n"
        },
        {
          "title": "Keywords",
          "shortTitle": "Keywords",
          "key": "keywords",
          "summary": "Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Rust divides keywords into three categories:\n    1. Strict\n    2. Reserved \n    3. Weak\n",
          "details": "- Strict Keywords\n  * These keywords can only be used in their correct contexts. They cannot be used as the names of: Items, Variables and function parameters, etc.\n  * For Example:- ` mut, break, else, continue, return, impl, etc. ` \n- Reserved Variables\n  * These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords.\n  * For Example:- ` abstract, try, do, final, typeof, etc. `\n- Weak Keywords\n  * These keywords have special meaning only in certain contexts.\n  * For example, it is possible to declare a variable or method with the name `union`.\n"
        },
        {
          "title": "Bit Manipulation",
          "shortTitle": "Bit Manipulation",
          "key": "bit-manupilation",
          "summary": "Bit manipulation is the process of applying logical operations on a sequence of bits to achieve a required result.",
          "details": "- Bit Mnipulation is strictly done by rust compilers for storing data in variables, for two's compliment and many other purposes.\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "strings",
          "summary": "There are two types of strings in Rust: `String` and `&str`.",
          "details": "- String\n  * Strings are formed by a list of characters, which is really an \"array of characters\".\n  * A String is stored as a vector of bytes `(Vec<u8>)`.\n  * A String is made up of three components: a pointer to some bytes, a length, and a capacity.\n  * The pointer points to an internal buffer String uses to store its data.\n  * The length is the number of bytes currently stored in the buffer, and the capacity is the size of the buffer in bytes. As such, the length will always be less than or equal to the capacity.\n  * The buffer is always stored on the heap.\n  * It is guaranteed to always be a valid `UTF-8` sequence. \n  * String is heap allocated, growable and not null terminated.\n  * We can create a String from a literal string with `String::from`\n  * We can append a char to a String with the push method, and append a &str with the `push_str` method\n- &str\n  * The str type, also called a ‘string slice’, is the most primitive string type.\n  * A &str is made up of two components: a pointer to some bytes, and a length.\n  * `&str` is `(&[u8])` that always points to a valid UTF-8 sequence.\n  * It can be used to view into a String, just like `&[T]` is a view into `Vec<T>`.\n"
        },
        {
          "title": "Package Manager",
          "shortTitle": "Package Manager",
          "key": "package-manager",
          "summary": "- A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. \n",
          "details": "- Cargo is the Rust package manager.\n"
        }
      ]
    },
    {
      "title": "Ownership and Borrowing",
      "key": "owner-borrow",
      "details": "This chapter introduces the high level memory management and safety with ownership and borrowing.\n - Memory Allocation and Memory Types\n    1. Stacks\n    2. Heaps\n    3. Memory alignment\n    4. Std::mem modules\n - How Rust’s Memory Mode is different from others\n - Ownership\n    1. What is Ownership in rust\n    2. What are Scopes\n    3. Move and Copy Semantics\n - Duplicating Types via Traits\n    1. Copy\n    2. Clone\n - Ownership and Memory Safety\n    1. Dangling Pointers\n    2. Double Free\n    3. Memory Leaks\n - Borrowing\n    1. Borrowing rules\n    2. References and multiple references\n    3. Dangling References\n    4. Method types using borrowing\n - Lifetimes\n    1. Parameters\n    2. Lifetime rules\n    3. Multiple lifetimes\n    4. Lifetime in impl blocks\n",
      "order": 4,
      "questions": [
        {
          "uuid": "e1ccd55d-91f0-48ad-9ec5-9aa3fcf3c241",
          "type": "SingleChoice",
          "content": "How many owners can a value on heap have ?",
          "hint": "NoHint",
          "explanation": "Every value in Rust has exactly 1 owner.",
          "answerKeys": [
            "B"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "memory-allocation"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "2",
              "key": "A",
              "order": 0
            },
            {
              "content": "1",
              "key": "B",
              "order": 1
            },
            {
              "content": "variable value",
              "key": "C",
              "order": 2
            },
            {
              "content": "value on heap has no owner",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7b6d2b15-bec7-4740-9083-322f44349d74",
          "type": "SingleChoice",
          "content": "Reference can be used to access the variable outside its scope ?",
          "hint": "NoHint",
          "explanation": "Variable can never be accessed outside its scope.",
          "answerKeys": [
            "B"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "memory-allocation"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "918fdd9d-9870-4f28-9dde-c542f07882b0",
          "type": "SingleChoice",
          "content": "What is double free error ?",
          "hint": "NoHint",
          "explanation": "Double free error can occur in theory if 2 variable point to same value and try to free it as they go out of scope.",
          "answerKeys": [
            "A"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "memory-allocation"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "2 variables try to free same value as they go out of scope",
              "key": "A",
              "order": 0
            },
            {
              "content": "Program free memory used by a variable on heap while it is in scope",
              "key": "B",
              "order": 1
            },
            {
              "content": "An out of scope variable is assigned a value again",
              "key": "c",
              "order": 2
            },
            {
              "content": "Same variable is used in different scopes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ad736f97-44d9-4ccc-a6fe-b0fb67c0ea17",
          "type": "SingleChoice",
          "content": "How manu immutable references can a variable have ?",
          "hint": "NoHint",
          "explanation": "A variable can have any number of immutable references.",
          "answerKeys": [
            "C"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "borrowing"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "1",
              "key": "A",
              "order": 0
            },
            {
              "content": "2",
              "key": "B",
              "order": 1
            },
            {
              "content": "a variable can have any number of immutable references",
              "key": "C",
              "order": 2
            },
            {
              "content": "less than 10",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e635a225-452c-459b-ab44-c52afad1a793",
          "type": "SingleChoice",
          "content": "How manu mutable references can a variable have ?",
          "hint": "NoHint",
          "explanation": "A variable can have once 1 mutable reference, this saves it from data race condition.",
          "answerKeys": [
            "A"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "borrowing"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "1",
              "key": "A",
              "order": 0
            },
            {
              "content": "2",
              "key": "B",
              "order": 1
            },
            {
              "content": "a variable can have any number of mutable references",
              "key": "C",
              "order": 2
            },
            {
              "content": "references can not be mutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c8dea1c7-41e0-4b9a-afef-e3dd72a37222",
          "type": "MultipleChoice",
          "content": "Which of the following are true about variable passing in a function ?",
          "hint": "NoHint",
          "explanation": "Variables are moved or copied while passing to a function depending on whether they are on heap or stack respectively.",
          "answerKeys": [
            "B, C"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "borrowing"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "variable passed to a function are always cloned",
              "key": "A",
              "order": 0
            },
            {
              "content": "variables on stack are copied when passed to function",
              "key": "B",
              "order": 1
            },
            {
              "content": "variables on heap are moved when passed to function",
              "key": "C",
              "order": 2
            },
            {
              "content": "variable passed to a function are always copied",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a1aab277-a2b0-42e1-9811-19fba895f78f",
          "type": "SingleChoice",
          "content": "How can a value be accessible in a function after it is moved to another function ?",
          "hint": "NoHint",
          "explanation": "When a value is returned from a function it is again moved to calling scope.",
          "answerKeys": [
            "D"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "memory-allocation"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "by creating references to the value before passing to the function",
              "key": "A",
              "order": 0
            },
            {
              "content": "a value moved to another function can never be used not in parent function",
              "key": "B",
              "order": 1
            },
            {
              "content": "By creating a copy of the value before passing it to function",
              "key": "C",
              "order": 2
            },
            {
              "content": "by returning value from function and assigning to a new variable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c8fdd1df-4c7b-459f-b47a-b45a798ea393",
          "type": "MutipleChoice",
          "content": "What is true about borrowing a variable ?",
          "hint": "NoHint",
          "explanation": "Borrowing can be used to create mutable or immutable references to variable without changing their scope.",
          "answerKeys": [
            "C, D"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "ownership"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "borrowed variables can not be mutated",
              "key": "A",
              "order": 0
            },
            {
              "content": "borrowing can be used to increase scope of the variable",
              "key": "B",
              "order": 1
            },
            {
              "content": "borrowing does not changes the ownership of the variable",
              "key": "C",
              "order": 2
            },
            {
              "content": "borrowing creates reference to variable whithout changing its scope",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d816e66d-3e8c-4894-8f20-045504865f24",
          "type": "SingleChoice",
          "content": "When is dangling reference created ?",
          "hint": "NoHint",
          "explanation": "Rust does not allow creating dangling references.",
          "answerKeys": [
            "A"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "borrowing"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "it is not possible to create dangling references in rust",
              "key": "A",
              "order": 0
            },
            {
              "content": "it is created when a references value goes out of scope",
              "key": "B",
              "order": 1
            },
            {
              "content": "it is created when a references value if moved",
              "key": "C",
              "order": 2
            },
            {
              "content": "it is created when value of a reference is incremented to next memory location",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ccf096f4-a771-4abe-b784-04db290e2b8e",
          "type": "SingleChoice",
          "content": "References in Rust are always valid ?",
          "hint": "NoHint",
          "explanation": "It is not possible to create invalid references in Rust.",
          "answerKeys": [
            "A"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "borrowing"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "8a62b57e-decb-4c7c-b93d-2065ba6bd34b",
          "type": "SingleChoice",
          "content": "What is result of compiling code below ?\n```\n  let mut s = String::from(\"hello\");\n\n  {\n      let r1 = &mut s;\n  }\n\n  let r2 = &mut s;\n```\n",
          "hint": "NoHint",
          "explanation": "Mutable references to a variable in different scopes do not create compilation issue.",
          "answerKeys": [
            "C"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "borrowing",
            "variable-scope"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Code does not compiles as it is not possible to have 2 mutable references to a variable",
              "key": "A",
              "order": 0
            },
            {
              "content": "Code compiles but breaks at runtime",
              "key": "B",
              "order": 1
            },
            {
              "content": "Code compiles successfully as 2 mutable references have different scope",
              "key": "C",
              "order": 2
            },
            {
              "content": "Code does not compile as it is not possible to have a mutable reference to a string value",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8e6bc92a-b13c-4cd1-9884-69966f5eda50",
          "type": "MultipleChoice",
          "content": "Which of the following is true about variables on stack ?",
          "hint": "NoHint",
          "explanation": "Variables on stack are fixed in size and follow copy symantics.",
          "answerKeys": [
            "C, D"
          ],
          "topic": "05_owner_borrow",
          "subTopics": [
            "memory-allocation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Variables on stack can be moved",
              "key": "A",
              "order": 0
            },
            {
              "content": "Variables on stack have size determined dynamically at runtime",
              "key": "B",
              "order": 1
            },
            {
              "content": "Variables on stack are fixed in size",
              "key": "C",
              "order": 2
            },
            {
              "content": "Variables on stack are copied",
              "key": "D",
              "order": 3
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "08415e65-cc8d-4123-bdeb-b9b39cb3a4db",
          "title": "Rust - Ownership and Borrowing",
          "shortTitle": "Ownership",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=1cZ15uAvWro",
          "subTopics": [
            "memory-allocation"
          ],
          "details": "Ownership is one of the most important features of Rust, it helps the language ensure memory safety without the need of garbage collection. Another important concept related to ownership is borrowing.\nThis video explains about\n* Scope and Ownership\n* References and Borrowing\n"
        },
        {
          "uuid": "24e52953-b7aa-4858-bfe9-0050f871b160",
          "title": "Rust - Ownership and Borrowing",
          "shortTitle": "Ownership",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=Tw5Xr68GUSk, https://www.youtube.com/watch?v=6eCV-Q-kjX4, https://www.youtube.com/watch?v=k_WmestbBYw",
          "subTopics": [
            "variable-scope",
            "borrowing"
          ],
          "details": "Ownership and scope in Rust, writing memory safe code using borrowing.\nThis video explains about\n* Ownership and Scope\n* Writing code using borrowing\n* Immutable and mutable references\n* Rules for borrowing\n"
        }
      ],
      "summaries": [
        {
          "title": "Memory Allocation",
          "shortTitle": "Memory Allocation",
          "key": "memory-allocation",
          "summary": "Rust has a unique approach towards memory allocation. Data variables are either stored on stack or heap.",
          "details": "- Memory Management Approach\n  * Different languages have different approach towards memory management.\n  * In rust data with known, fixed size is stored on stack, data with an unknown size at compile time or size that can change is stored on heap.\n- Stack\n  * Stacks are last-in first-out and store fixed size variables.\n  * Memory management on stacks is easy.\n  ![Stack](https://github.com/DoDAO-io/dodao-rust-course/blob/2419453a452b44111d5fa63d76663c831ea83901/images/img_stack.jpg?raw=true)\n- Heap\n  * Heap is less organized, when adding a variable on the heap the memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a pointer, which is the address of that location.\n  * Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses.\n  ![Heap](https://github.com/DoDAO-io/dodao-rust-course/blob/2419453a452b44111d5fa63d76663c831ea83901/images/img_heap.jpg?raw=true)\n"
        },
        {
          "title": "Variable Scope",
          "shortTitle": "Variable Scope",
          "key": "variable-scope",
          "summary": "In Rust a variable is valid only in its scope, as soon as it goes out of scope its memory is freed.",
          "details": "- Scope:\n  * As the variable goes out of scope it is no longer valid, at this point Rust automatically returns the memory used by the variable.\n  * Rust’s approach to memory management is unique by scoping is simple and robust.\n  * Other languages use different approaches like garbage collection where that regularly looks for no-longer used memory as the program runs, some other languages depend on programmers regularly freeing up the memory. These approaches are less efficient.\n    ```\n      fn main() {\n        {\n          let str = “Hello World”; // str is valid from this point onwards\n        }\n        // str goes out of scope\n      }\n    ```\n"
        },
        {
          "title": "Ownership",
          "shortTitle": "Ownership",
          "key": "ownership",
          "summary": "Each variable in Rust has an Owner.",
          "details": "- What is Ownership in rust:\n  * Each value in Rust has an owner\n  * Ownership in Rust strictly follows certain rules, if these rules are violated the program will not compile:\n    - each value in Rust has a owner\n    - there can only be one owner at a time\n    - when the owner goes out of scope, value will be dropped\n  * If any of these rules is violated the program will not compile.\n  * None of these rules slow down the execution at runtime.\n- Moving Data:\n  * When a variable on the heap is assigned to another variable the first one is no longer valid. The ownership of the variable is said to be moved.\n    ```\n      let s1 = String::from(“Hello”);\n      let s2 = s1\n\n      println!(“{}, world!”, s1); // this line gives an error.\n    ```\n  * After the line let s2 = s1, rust considers s1 as no longer valid. Thus trying to use s1 after s2 is created will not work.\n  * While dealing with variables on stack values are not moved, they are rather copied.\n  ![Moving Value](https://github.com/DoDAO-io/dodao-rust-course/blob/2419453a452b44111d5fa63d76663c831ea83901/images/img_move.jpg?raw=true)\n- Double Free Error\n  * The reason for invalidating the original reference after moving the value is to prevent double free error.\n  * Consider both s1 and s2 remain valid after the assignment. When they both go out of scope, they will both try to free the same memory. This is a memory safety bug called double free error. Freeing memory twice can lead to memory corruption which can result in security vulnerability.\n- Functions - Passing and Returning Value\n  * Mechanics of passing and returning value from a function is the same as when assigning value.\n  * Value will be moved or copied depending on whether it is on heap or stack.\n    ```\n      fn main() {\n          let s = String::from(“Hello”);\n          takes_ownership(s); // Function takes ownership of s, so it is no longer valid here\n      }\n\n      fn takes_ownership(some_string: String) {\n          println!(some_string);\n      } // some_string goes out of scope after function call\n    ```\n  * To be able to access the value s after function call we need to return it:\n    ```\n      fn main() {\n        let s1 = String::from(“Hello”);\n        let s2 = takes_and_return_ownership(s1); // Function takes ownership of s1\n      }\n\n      fn takes_and_return_ownership(some_string: String) {\n          println!(some_string);\n          some_string;\n      } // some_string moves back to calling function\n    ```\n"
        },
        {
          "title": "Borrowing",
          "shortTitle": "Borrowing",
          "key": "borrowing",
          "summary": "The action of creating a reference to a variable is called borrowing.",
          "details": "- What is Borrowing:\n  * Moving a variable on the heap is not always convenient.\n  * Consider a situation like passing a variable on heap to a function call, to be able to use a variable after the function call we need to return it from the function. In such situations we can provide a reference to the variable.\n  * Creating a reference to a variable is called borrowing, references can use variables but not own them.\n- Reference\n  * A reference stores the address of the data and we can follow the reference to access data stored at that address, that data is owned by a different variable.\n  * A reference is always guaranteed to point to a valid value for the life of the referenced value.\n  * The value pointed by the reference is not dropped as the reference goes out of scope as it does not have the ownership.\n  * Ampersands are used to represent references.\n    ```\n      fn main() {\n        let s = String::from(“Hello”);\n        calculate_length(&s); // Function takes reference to s\n      }\n\n      fn calculate_length(string_reference: &String) {\n          string_reference.len();\n      }\n    ```\n    ![Reference](https://github.com/DoDAO-io/dodao-rust-course/blob/2419453a452b44111d5fa63d76663c831ea83901/images/img_reference.jpg?raw=true)\n  - Mutable Reference\n    * References can be easily made mutable:\n      ```\n        fn main() {\n          let mut s = String::from(“Hello”);\n          calculate_length(&mut s); // Function takes reference to s\n        }\n\n        fn calculate_length(string_reference: &mut String) {\n            string_reference.push_str(“, world !”);\n        }\n      ```\n    * At any given time there can be one mutable reference or multiple immutable reference to the variable.\n    * This restriction enables rust to prevent data race at compile time.\n  - Dangling Reference\n    * The Rust compiler ensures that dangling references can never exist. Compiler will guarantee that the data will not go out of scope before the reference to the data.\n"
        }
      ]
    },
    {
      "title": "Collections",
      "key": "collections",
      "details": "This chapter talks about various popular pre-written Data Structures that are available in rust.\n - Vec<T>\n - String\n - HashMap<K, V>\n",
      "order": 5,
      "questions": [
        {
          "uuid": "01d4c798-5729-423b-9a11-566c29838d77",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "037554bd-80e3-40bd-8bb5-60633cffef7d",
          "title": "Rust - Collections",
          "shortTitle": "Collections",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=tTUFl8c_Z0w",
          "subTopics": [
            "collection_vector",
            "collection_strings"
          ],
          "details": "Introduction to popular collection types in Rust\n* Vec<T>\n* HashMap<K, V>\n* HashSet<T>\n* VecDeque<T>\n* LinkedList<T>\n"
        },
        {
          "uuid": "9d8a8dbd-3dd4-44aa-8d79-8e10dddb23fe",
          "title": "Rust - Collections Demo",
          "shortTitle": "Collections Demo",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=yAw3cpqIXtg",
          "subTopics": [
            "collection_vector",
            "collection_hashmap"
          ],
          "details": "Demo of code written using Collection Data Structures in Rust\n"
        }
      ],
      "summaries": [
        {
          "title": "Introduction",
          "shortTitle": "Introduction",
          "key": "collection_introduction",
          "summary": "Collections are useful data structure in Rust that can contain multiple values.",
          "details": "- Collections can contain multiple values\n- Collections are stored on Heap and are dynamically sized, their size is not required to be known at compile time\n- Rust collections can be grouped into 4 major categories:\n  * Sequences - Vec, VecDeque, LinkedList\n  * Maps - HashMap, BTreeMap\n  * sets: HashSet, BTreeSet\n  * Misc: BinaryHeap\n- 3 of most common collections are:\n  * Vector\n  * String\n  * HashMap\n"
        },
        {
          "title": "Vector",
          "shortTitle": "Vector",
          "key": "collection_vector",
          "summary": "Vector allow to store more than 1 value in single data structure.",
          "details": "- Vector has multiple items of same time stored next to each other in memory.\n- Creating a vector\n  * creating an empty vector\n    ```\n    let v: Vec<i32> = Vec::new();\n    ```\n  * creating vector using vec! macro\n    ```\n    let v = vec![1, 2, 3];\n    ```\n- Adding a value of a vector\n  * Value can be added to vector using method `push`\n    ```\n    let mut v = Vec::new();\n\n    v.push(10);\n    v.push(20);\n    v.push(30);\n    ```\n- Reading elements of a vector\n  * There are 2 ways to read elements in vector - indexing, using get method\n  * Indexing\n    ```\n    let v = Vec![1,2,3,4,5];\n    let third = &v[2];\n\n    println!(“The third element is {}”, third);\n\n    ```\n  * Using get method\n    ```\n    let v = Vec![1,2,3,4,5];\n    let third = v.get(2);\n\n    println!(“The third element is {}”, third);\n    ```\n  * If user access a value outside the vector, if using indexing it will panic, if `get` method it will return None.\n  * According to borrow checker rule, if there is a reference created to an element in the vector, vector can not be modified.\n- Iterating over vector\n  * For loop can be used to iterate over vector\n    ```\n    let v = Vec![1,2,3,4,5];\n    for i in &v {\n        println!(“{}”, i);\n    }\n    ```\n  * To mutate a vector while iterating\n    ```\n    let mut v = Vec![1,2,3,4,5];\n    for i in &mut v {\n        *i += 50;\n        println!(“{}”, i);\n    }\n    ```\n- Useful method in vector\n  * len `vec.len()`: gives length of the vector\n  * capacity `vec.capacity()`: gives total capacity of the vector in bytes\n  * contains `vec.contains(v)`: check if a vector contains the element\n  * remove `vec.remove(index)`: remove an element from specified index in the vector\n  * pop `vec.pop()`: remove an element from end of the vector\n  * push `vec.push(v)`: adds an element to the end of the vector\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "collection_strings",
          "summary": "Strings in Rust are a collection of bytes.",
          "details": "- Strings are collection of bytes that support UTF-8 encoded text.\n- Thus different characters of most languages can be represented in Rust.\n- Creating a string:\n  * Empty string can be created as\n    ```\n    let mut s = String::new();\n    ```\n  * Creating a string with initial value\n    ```\n    let s = “initial_value”.to_string();\n    or\n    let s = String::from(“initial_value”);\n    ```\n- Updating a string:\n  * Text can be appended to string using `push_str` and `push` methods.\n    * `push_str` ethod can be used to append a string to another.\n    * Signature of `push_str` is `pub fn push_str(&mut self, string: &str)`\n    * `push_str` does not take ownership of the string passed.\n      ```\n      let mut s = String::from(“Hello, ”);\n      s.push_str(“world”);\n      ```\n    * `push` method can be used to append single character to string:\n      ```\n      let mut s = String::from(“Ca”);\n      s.push(“t”);\n      ```\n  * Strings can be concatenated using + macro\n    ```\n    let s1 = “Hello, “;\n    let s2 = “world!“;\n\n    let s3 = s1 + &s2;\n    ```\n    * + macro uses a method whose signature is `fn add(self, s: &str) -> string`\n    * in above example string s1 is moved and is not accessible after concatenation while reference to string &s2 is appended to it.\n  * For a more complicated string combining format! macro can be used:\n    ```\n    let s1 = “tic”;\n    let s1 = “tac”;\n    let s1 = “toe”;\n\n    let s = format!(“{}-{}-{}”, s1, s2, s3);\n    ```\n- Rust does not allow indexing strings. This limitation comes from the way strings are implemented in rust. Strings are internally array of bytes.\n- Iterating over string:\n  * A string can be tokenized on while space or any character token:\n    ```\n    for s in str.split_whitespace {\n        println!(“{}”, found);\n    }\n\n    for s in str.split(‘,’) {\n        println!(“{}”, found);\n    }\n    ```\n  * It is also possible to iterate over characters or bytes of string:\n    ```\n    for c in “Зд”.chars() {\n        println!(c);\n    }\n    // above will print\n    // 3\n    // д\n    ```\n\n    ```\n    for c in “Зд”.bytes() {\n        println!(c);\n    }\n\n    // Will print:\n    // 208\n    // 151\n    // 208\n    // 180\n    ```\n- Other useful string methods include:\n  * len `str.len()`: gives length of the string\n  * capacity `str.capacity()`: gives total capacity of the string in bytes\n  * contains `str.contains(v)`: find a substring in the parent string\n  * replace `str.replace(\"replace_str1\", \"replace_str2\")`: replace a substring in the parent string\n  * trim `str.trim()`: trim a string\n"
        },
        {
          "title": "HashMap",
          "shortTitle": "HashMap",
          "key": "collection_hashmap",
          "summary": "HashMap stores a mapping of keys to value.",
          "details": "- The type HashMap<K, V> stores a mapping of keys of type K to values of type V\n- Mapping from key K to value V is done using hashing that determines how these values are placed in memory.\n- Keys in hashMap can be of any type but all the kes should be of same type, similarly all the values should also be of same type.\n- Creating a HashMap:\n  * HashMap needs to be explicitly included in the scope.\n  * Also, there is no support of macro for creating HashMap.\n  * HashMap can be created as follows:\n    ```\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::New();\n\n    scores.insert(String::from(“Blue”), 10);\n    scores.insert(String::from(“Yellow”), 20);\n    ```\n- Accessing values in HashMap\n  * values in HashMap can be accessed using `get` function:\n    ```\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::New();\n\n    scores.insert(String::from(“Blue”), 10);\n    scores.insert(String::from(“Yellow”), 20);\n\n    let team_name = String::from(“Blue”);\n    const score = scores.get(team_name);\n    ```\n  * It is also possible to iterate over values of a HashMap:\n    ```\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::New();\n\n    scores.insert(String::from(“Blue”), 10);\n    scores.insert(String::from(“Yellow”), 20);\n\n      for (key, value) in & scores {\n          println!(“{}, {}”, key, value);\n      }\n    ```\n  * Updating a HashMap\n    - A value in HashMap can be overridden by inserting the kay again.\n      ```\n      use std::collections::HashMap;\n\n      let mut scores = HashMap::New();\n\n      scores.insert(String::from(“Blue”), 10);\n      scores.insert(String::from(“Blue”), 20);\n\n      println!(“{:?}”, scores); // this will print {“Blue”: 20}\n      ```\n    - Function `or_insert` can be used to add a key if it is not already present:\n      ```\n      use std::collections::HashMap;\n\n      let mut scores = HashMap::New();\n      scores.insert(String::from(“Blue”), 10);\n\n\n      scores.entry(String::from(“Yello”)).or_insert(20);\n      scores.entry(String::from(“Blue”)).or_insert(50);\n\n      println!(“{:?}”, scores); // this will print {“Yellow”: 20, “Blue”: 10}\n      ```\n"
        }
      ]
    },
    {
      "title": "Pointers and Iterators",
      "key": "point-iter",
      "details": "This chapter explains about pointers and iterators in detail.\n - Reference type pointers\n - Raw Pointers\n - Smart Pointers \n    1. Types\n    2. Drop\n    3. Deref and DerefMUT\n - Uses of Interior Mutability\n - Introduction to Iterators\n - Uses and advantages of Iterators\n",
      "order": 6,
      "questions": [
        {
          "uuid": "ab88a2ab-c80b-49f5-9ea0-b5ed8e4933b1",
          "type": "SingleChoice",
          "content": "What is the output of the following code snippet:\n \n    ``` \n        fn main() {\n          let x = 12;\n          println!(\"The value of x is: {x}\");\n          x = 8;\n          println!(\"The value of x is: {x}\");\n        } \n    ```\n",
          "hint": "NoHint",
          "explanation": "Error would occur, because the variable x isn't set as mutable so it's value can't be changed.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The value of x is: 8",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: the variable x is mutable",
              "key": "B",
              "order": 1
            },
            {
              "content": "The value of x is: 12",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error: the variable x is immutable",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "23a0e9e5-6c47-4512-98a5-4cd3ab6eff25",
          "type": "SingleChoice",
          "content": "Space taken by a Character data type in rust is",
          "hint": "It doesn't use ASCII values",
          "explanation": "Rust's char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "1 byte",
              "key": "A",
              "order": 0
            },
            {
              "content": "4 bytes",
              "key": "B",
              "order": 1
            },
            {
              "content": "8 bytes",
              "key": "C",
              "order": 2
            },
            {
              "content": "16 bytes",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "39385b22-7604-492f-9c2e-aaae409c6b79",
          "type": "SingleChoice",
          "content": "Rust is a Dynamically typed language.",
          "hint": "Does the compiler need to know the data type at compile time?",
          "explanation": "It is statically typed",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "6b844c24-f769-4662-a591-83c0a5f8c6c3",
          "type": "SingleChoice",
          "content": "Select the incorrect declaration statement",
          "hint": "NoHint",
          "explanation": "It is declared as an unsigned integer, but the value is negative",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let mut x: u32 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let mut x: i32 = -20;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let mut x: u32 = -20;",
              "key": "C",
              "order": 2
            },
            {
              "content": "let mut x = 20;",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6f2cb4ae-db4d-4c04-bfd4-37669695dab0",
          "type": "SingleChoice",
          "content": "Suppose you declared a variable as u8 and then assigned it a value of \"257\". What would be the output if it’s compiled with a \"`“--release” flag?`\"",
          "hint": "NoHint",
          "explanation": "After 255 the digits start rolling back to 0, 1 and so on",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "257",
              "key": "A",
              "order": 0
            },
            {
              "content": "Error: Integer Overflow",
              "key": "B",
              "order": 1
            },
            {
              "content": "0",
              "key": "C",
              "order": 2
            },
            {
              "content": "1",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "0708f185-46b5-45ee-ac47-3e7e1ca611b3",
          "type": "SingleChoice",
          "content": "Are Tuples in rust dynamic in nature?\n\"Eg:-\" \n``` \n  let tup: (i32, f64, bool) = (500, 6.4, true); \n```\n",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Yes",
              "key": "A",
              "order": 0
            },
            {
              "content": "No",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d11a531f-f32f-4764-a60a-2cc5af348245",
          "type": "SingleChoice",
          "content": "Select the correct statements for the two String     types(“String” and “&str”).\n \"a. “Strings” are immutable in nature and cannot be modified. \"\n \"b. “&str” is a primitive data type, whereas “String” is implemented in the standard library.\"\n \"c. To read a file into the strings, we use the read_to_string() method.\"\n",
          "hint": "NoHint",
          "explanation": "Strings are mutable in nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Only a",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both a & b",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both b & c",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "9511276a-dd19-47c4-b086-0d1de8cafedb",
          "type": "SingleChoice",
          "content": "Which among the following is not an acceptable keyword in rust?",
          "hint": "NoHint",
          "explanation": "var is not a keyword in rust",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "let",
              "key": "A",
              "order": 0
            },
            {
              "content": "var",
              "key": "B",
              "order": 1
            },
            {
              "content": "impl",
              "key": "C",
              "order": 2
            },
            {
              "content": "mut",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1ed70de2-99c6-43dd-8793-40ad702d6bff",
          "type": "SingleChoice",
          "content": "Which of the following brackets are used as placeholders in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "{}",
              "key": "A",
              "order": 0
            },
            {
              "content": "[ ]",
              "key": "B",
              "order": 1
            },
            {
              "content": "( )",
              "key": "C",
              "order": 2
            },
            {
              "content": "< >",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7f129510-4d19-4a62-bae1-34109714fa0e",
          "type": "SingleChoice",
          "content": "Constants in rust can be defined in which scope?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Global",
              "key": "A",
              "order": 0
            },
            {
              "content": "Method",
              "key": "B",
              "order": 1
            },
            {
              "content": "Local",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b29fa10c-2efa-478c-8207-2e2a80af8700",
          "type": "SingleChoice",
          "content": "Which of the following are the scalar data types present in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "integers, floating-point numbers, booleans, characters",
              "key": "A",
              "order": 0
            },
            {
              "content": "integers, signed numbers, unsigned numbers, booleans, characters",
              "key": "B",
              "order": 1
            },
            {
              "content": "integers, strings, signed numbers, unsigned numbers, booleans",
              "key": "C",
              "order": 2
            },
            {
              "content": "integers, floating-point numbers, strings, booleans",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "775949c1-23b7-42bc-b184-bc755c8d2657",
          "type": "SingleChoice",
          "content": "The compound data types supported by rust are-",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays, Lists, Red-Black Trees",
              "key": "A",
              "order": 0
            },
            {
              "content": "Arrays, Lists, Vectors",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays, Tuples",
              "key": "C",
              "order": 2
            },
            {
              "content": "Arrays, Maps",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "7fd341f0-4921-4e6e-aa0c-c3897f91d3b2",
          "type": "SingleChoice",
          "content": "Which are valid array declarations in rust? \n``` \n       let mut arr : {i64, 3} = [2,3,5];\n       let mut arr : {3,3};\n       let mut arr = [2,3,5];\n ```\n",
          "hint": "Look for the wrong declaration format, you may or may not find it",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Both a & b",
              "key": "A",
              "order": 0
            },
            {
              "content": "Both b & c",
              "key": "B",
              "order": 1
            },
            {
              "content": "Only a",
              "key": "C",
              "order": 2
            },
            {
              "content": "All a, b, & c",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "75d926cd-6f05-4185-916c-fc6c2b90eecd",
          "type": "SingleChoice",
          "content": "Which of the following has low memory usage, const or static?",
          "hint": "How many of these can we update?",
          "explanation": "Constant doesn't uses any extra heap memory to update",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "const",
              "key": "A",
              "order": 0
            },
            {
              "content": "static",
              "key": "B",
              "order": 1
            },
            {
              "content": "depends upon the data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "both have the same memory usage",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "a7495120-1470-41d4-aeb2-6d9d7ebd876c",
          "type": "SingleChoice",
          "content": "To use dynamic-sized variables, which of the following should be used?",
          "hint": "No hint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Arrays & Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "List all the data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "?Sized",
              "key": "C",
              "order": 2
            },
            {
              "content": "Dynamic-Sized variables not supported in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "4c564a7d-28d3-4fca-a06d-f3f3fc419d13",
          "type": "SingleChoice",
          "content": "What is the importance of the “type” keyword in rust?",
          "hint": "Used for another types.",
          "explanation": "Sets an alias of another type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "used for dynamic-sized data type",
              "key": "A",
              "order": 0
            },
            {
              "content": "used to create a template",
              "key": "B",
              "order": 1
            },
            {
              "content": "used for user-defined data type",
              "key": "C",
              "order": 2
            },
            {
              "content": "used to set an alias of another type",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d677a228-7f5d-4b5f-8bee-9f40052efafb",
          "type": "SingleChoice",
          "content": "What is the importance of Cargo in rust?",
          "hint": "What is npm used for?",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "package-manager"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Collection of rust libraries",
              "key": "A",
              "order": 0
            },
            {
              "content": "Modules Package manager",
              "key": "B",
              "order": 1
            },
            {
              "content": "Build system and Package manager",
              "key": "C",
              "order": 2
            },
            {
              "content": "Used to create and build UI projects in rust",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2715ab2c-35b3-4e6a-9697-f244c6e23676",
          "type": "SingleChoice",
          "content": "How to print the data type of a variable in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": " `std::any::type_name` ",
              "key": "A",
              "order": 0
            },
            {
              "content": " `variable.type_name()` ",
              "key": "B",
              "order": 1
            },
            {
              "content": " `std::intrisic::type_name` ",
              "key": "C",
              "order": 2
            },
            {
              "content": " `std::variable::type_name` ",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e326751d-bb65-44e4-a6ce-fa62faa96f94",
          "type": "SingleChoice",
          "content": "Which type cast preserves the mathematical value in all cases?",
          "hint": "NoHint",
          "explanation": "Because they can handle both signed and unsigned values, and are typecasted in one data type only.",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "bit-manupilation"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "i32 as i64",
              "key": "A",
              "order": 0
            },
            {
              "content": "i64 as i32",
              "key": "B",
              "order": 1
            },
            {
              "content": "usize as u64",
              "key": "C",
              "order": 2
            },
            {
              "content": "f64 as f32",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ffac79fe-2367-42d1-82eb-b6e6127aead5",
          "type": "SingleChoice",
          "content": "Which of the following cannot be destructed further into smaller segments?",
          "hint": "Think of the structures they're built upon ",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Tuples",
              "key": "A",
              "order": 0
            },
            {
              "content": "Traits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Arrays",
              "key": "C",
              "order": 2
            },
            {
              "content": "Structs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b0a3444-3b86-4e09-8021-f4b66cb2ce09",
          "type": "SingleChoice",
          "content": "Which comment syntax is not legal?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "<//>",
              "key": "A",
              "order": 0
            },
            {
              "content": "/* */",
              "key": "B",
              "order": 1
            },
            {
              "content": "//!",
              "key": "C",
              "order": 2
            },
            {
              "content": "//",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f9d0f0d-4670-44d7-b69f-d398ecfb3236",
          "type": "SingleChoice",
          "content": "Values of the array can be deleted.",
          "hint": "NoHint",
          "explanation": "Values can be updated, but can't be deleted",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "d2af3b88-9912-4729-9673-4101b7ec4765",
          "type": "SingleChoice",
          "content": "How do you initialize every element of an array of size 5 with 0?",
          "hint": "Look at the declarations, don't get confused by the order while declaring",
          "explanation": "The first argument is the integer you want to initialize an element with, and the second argument tells the end posistion till where you want to pre-initialize.",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "`let mut arr : {i32;5} = {5;0};`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`let mut arr : {i32;5} = {0;5};`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`let mut arr : {5;i32} = {5;0};`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`let mut arr : {5;i32} = {0;5};`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "93c0673c-a86b-4bbb-82b0-3bb77bddab67",
          "type": "SingleChoice",
          "content": "Tuples in rust are",
          "hint": "NoHint",
          "explanation": "They can handle and store different data types",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "finite heterogeneous compound data types",
              "key": "A",
              "order": 0
            },
            {
              "content": "finite homogeneous compound data types",
              "key": "B",
              "order": 1
            },
            {
              "content": "infinite heterogeneous compound data types",
              "key": "C",
              "order": 2
            },
            {
              "content": "infinite homogeneous compound data types",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "8c7f2429-0db2-4288-bd4a-ef694b39206c",
          "type": "SingleChoice",
          "content": "What would be the output of the following code snippet?\n  ```\n    Fn main( ) {\t\n      let mut dodao_io = (\"\"Do\"\", 69, \"\"DAO\"\", 420);\n      println!(\"\"{} \"\", dodao_io );\n      println!(\"\"at 0 index = {} \"\", gfg.0 );\n    } \n  ```\n",
          "hint": "No Hint",
          "explanation": "The first print statement should've had {;?}",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & Do",
              "key": "A",
              "order": 0
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) only",
              "key": "B",
              "order": 1
            },
            {
              "content": "Compilation Error",
              "key": "C",
              "order": 2
            },
            {
              "content": "(\"Do\", 69, \"DAO\", 420) & “Do”",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2f6ce66c-3d34-4fa0-b6f6-188b7aa052b9",
          "type": "SingleChoice",
          "content": "What is the process of temporarily making a variable mutable known as?",
          "hint": "NoHint",
          "explanation": "No explantion",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Pseudo-mutability",
              "key": "A",
              "order": 0
            },
            {
              "content": "Foreshadowing",
              "key": "B",
              "order": 1
            },
            {
              "content": "Shadowing",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overshadowing",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d8a49f56-5da8-4b71-b18c-e745d5913dee",
          "type": "SingleChoice",
          "content": "Which of the following is an example of suffix annotation?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "let a_int: i64 = 20;",
              "key": "A",
              "order": 0
            },
            {
              "content": "let a_int = i6420;",
              "key": "B",
              "order": 1
            },
            {
              "content": "let a_int = 20i64;",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "419058bf-87e9-4c18-9b8e-3f96c3c820b3",
          "type": "SingleChoice",
          "content": "A. println!(\"1 + 2 = {}\", 1u32 + 2);\nB. println!(\"1 - 2 = {}\", 1u32 + 2);\n",
          "hint": "Solution being Positive or Negative might make a difference",
          "explanation": "Here, when initialized, 1 is set as unsigned 32 integer u32. In statement A, it works because  1+2=3, and it's positive. But, 1-2=(-1) and as they were unsigned integers, so they cannot hold a negative value, so this statement doesn't compile\n",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Only A compiles",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only B compiles",
              "key": "B",
              "order": 1
            },
            {
              "content": "Both A & B compile",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of them complies",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d97fc146-6c06-4a5c-a738-93a00cf7214e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n\"``` println!(\"{}\", 1_00u32 + 2_0); ```\"\n",
          "hint": "NoHint",
          "explanation": "1_000u32 is similar as 100 of u32 type.",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "Compilation Error",
              "key": "A",
              "order": 0
            },
            {
              "content": "Runtime Error",
              "key": "B",
              "order": 1
            },
            {
              "content": "3",
              "key": "C",
              "order": 2
            },
            {
              "content": "120",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "2448d741-4c38-46f3-b681-c3ffb44e54ac",
          "type": "SingleChoice",
          "content": "String in standard library has more functionalities coded into it than string slice?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Moderate",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "923d11ba-5c1c-4d48-8101-87ee08e0fa0e",
          "type": "SingleChoice",
          "content": "What is the output of the following code\n  ```\n  fn main() {\n    let first_string = \"This is some string \".to_string();\n    let second_string = \"Let's add some Data\";\n\n    let final_string = first_string + &second_string;\n\n    println!(\"First string is: {}\", first_string);   \n    println!(\"Second string is: {}\", second_string);\n\n    println!(\"Finally we have: {}\", final_string);\n  }\n  ```\n",
          "hint": "NoHint",
          "explanation": "Syntatical Error in the code snippet",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Only 1st print statement shows an output",
              "key": "A",
              "order": 0
            },
            {
              "content": "Only 1st and 2nd print statement shows an output",
              "key": "B",
              "order": 1
            },
            {
              "content": "All the 3 string statements show an output",
              "key": "C",
              "order": 2
            },
            {
              "content": "Error occurs",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ec5e9c9b-cafa-484e-8feb-51db5a0b7a33",
          "type": "SingleChoice",
          "content": "Which of the following operator is used by string slices to reference?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "`&`",
              "key": "A",
              "order": 0
            },
            {
              "content": "`%`",
              "key": "B",
              "order": 1
            },
            {
              "content": "`#`",
              "key": "C",
              "order": 2
            },
            {
              "content": "`*`",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "d0b24301-eda6-49d7-bf45-88777b13e15f",
          "type": "SingleChoice",
          "content": "Select the incorrect statement from the following",
          "hint": "Nohint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Once you get a string slice from a string, then you cannot really                 modify that String anymore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Using slices to work with Strings allows us to add an extra                       security measure.",
              "key": "B",
              "order": 1
            },
            {
              "content": "If you attempt to create a string slice in the middle of a                        multibyte character, your program will exit with an error",
              "key": "C",
              "order": 2
            },
            {
              "content": "String Slice mutably borrows the String itself",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "ef79a0da-3da6-445e-92b5-1d0e17799db6",
          "type": "SingleChoice",
          "content": "What will happen at the runtime if overflow occurs?",
          "hint": "NoHint",
          "explanation": "The memory stack is full and overflows, so a default panic occurs                 and the program crashes",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "Panic and crashes the program",
              "key": "A",
              "order": 0
            },
            {
              "content": "Garbage values will be output",
              "key": "B",
              "order": 1
            },
            {
              "content": "Those values are ignored and the output is as expected",
              "key": "C",
              "order": 2
            },
            {
              "content": "Overflow is handled already by rust, so it doesn’t occur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "1b152ab5-6524-49e0-b5c0-8bd5153b1ab1",
          "type": "SingleChoice",
          "content": "Character literals are specified using double quotes, as opposed to single quotes which stand for string literals.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings",
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "b49785fb-dd24-43b5-9f5a-e7dedc98cc5f",
          "type": "SingleChoice",
          "content": "Strings size is not known at compile time",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "strings"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "504040ac-6167-4304-8d6e-1e559975bac5",
          "type": "SingleChoice",
          "content": "For the following code\n ```  \n   fn main() {\n     let mut x = 2.0;\n     x: i32= 3.0; \n   }\n ```\n",
          "hint": "type declaration",
          "explanation": "i32 is intialized as a float data type",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types",
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "The code compiles without errors",
              "key": "A",
              "order": 0
            },
            {
              "content": "The code has errors because of immutability",
              "key": "B",
              "order": 1
            },
            {
              "content": "The code has errors because of illegal type conversion",
              "key": "C",
              "order": 2
            },
            {
              "content": "The code has errors because of no print and return statements",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "b0ef2f16-b79d-433a-af54-dc218060ef13",
          "type": "SingleChoice",
          "content": "If you want to store boolean values with the provision of adding more             values at runtime, the most suitable way would be to use",
          "hint": "Statically and Dynamic in nature",
          "explanation": "Vector is a Dynamic nature",
          "answerKeys": [
            "C"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Arrays",
              "key": "A",
              "order": 0
            },
            {
              "content": "Tuples",
              "key": "B",
              "order": 1
            },
            {
              "content": "Vectors",
              "key": "C",
              "order": 2
            },
            {
              "content": "bool type Variables",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "c731455f-5296-4b1f-9aee-46a4f77c25c1",
          "type": "SingleChoice",
          "content": "BOOLEAN is a type of data type that basically gives a tautology or                fallacy.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        },
        {
          "uuid": "f8497eb4-2e55-4e70-98c9-b395f254f412",
          "type": "SingleChoice",
          "content": "What are the categories in which keywords are divided in rust?",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Weak",
              "key": "A",
              "order": 0
            },
            {
              "content": "Strict",
              "key": "B",
              "order": 1
            },
            {
              "content": "Reserved",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "836ae5f7-8e1d-41ad-a0b9-e0ce810cbf93",
          "type": "SingleChoice",
          "content": "Which of the following can be used as a variable name in rust?",
          "hint": "NoHint",
          "explanation": "Rest are keywords in rust",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables",
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "crate",
              "key": "A",
              "order": 0
            },
            {
              "content": "match",
              "key": "B",
              "order": 1
            },
            {
              "content": "await",
              "key": "C",
              "order": 2
            },
            {
              "content": "tuple",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "853bbf17-ceb6-4a7c-9a32-c05f048a9ce6",
          "type": "SingleChoice",
          "content": "Identify the wrong set of rust keywords",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "D"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "keywords"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "async, await, where, use",
              "key": "A",
              "order": 0
            },
            {
              "content": "Move, return, mut, while",
              "key": "B",
              "order": 1
            },
            {
              "content": "union, dyn, try, abstract",
              "key": "C",
              "order": 2
            },
            {
              "content": "become, box, do, incur",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "118287fb-f962-4c6a-b7bb-f774e36f02bf",
          "type": "SingleChoice",
          "content": "Rust variable names can start with",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "variables"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "Letter, underscore",
              "key": "A",
              "order": 0
            },
            {
              "content": "Letter, digits",
              "key": "B",
              "order": 1
            },
            {
              "content": "Underscore, digits",
              "key": "C",
              "order": 2
            },
            {
              "content": "All of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "6ffbcd01-5b77-44bd-a9e1-56d3adb81a61",
          "type": "SingleChoice",
          "content": "q What is the result of the following calculation in rust \"1.0/0.0\"\n",
          "hint": "hint",
          "explanation": "explanation",
          "answerKeys": [
            "B"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "value-types"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "A positive number",
              "key": "A",
              "order": 0
            },
            {
              "content": "A negative number",
              "key": "B",
              "order": 1
            },
            {
              "content": "An unsigned number",
              "key": "C",
              "order": 2
            },
            {
              "content": "None of the above",
              "key": "D",
              "order": 3
            }
          ]
        },
        {
          "uuid": "e8c7d69e-3899-43aa-aaec-e45870a32a3f",
          "type": "SingleChoice",
          "content": "In Rust, every value has its data type. The data type tells the compiler what kind of value it is and how to use it.",
          "hint": "NoHint",
          "explanation": "No explanation",
          "answerKeys": [
            "A"
          ],
          "topic": "01_data_types",
          "subTopics": [
            "typed_language"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "True",
              "key": "A",
              "order": 0
            },
            {
              "content": "False",
              "key": "B",
              "order": 1
            }
          ]
        }
      ],
      "readings": [
        {
          "uuid": "699f89a5-4c2a-4442-afe7-eabc1fb8f5fa",
          "title": "Introduction to Blockchain Technology",
          "shortTitle": "Intro to Blockchain",
          "type": "YoutubeVideo",
          "url": "https://www.youtube.com/watch?v=u70_rafPs-0",
          "subTopics": [
            "variables"
          ],
          "details": "This video explains about\n* Point 1\n* Point 2\n"
        }
      ],
      "summaries": [
        {
          "title": "Typed language",
          "shortTitle": "Typed language",
          "key": "typed_language",
          "summary": "A programming language can be either a Dynamically-typed language or a Staticlly-typed language",
          "details": "- Dynamically-Typed Languages\n  * Dynamically-typed languages are the languages where the interpreter assigns variables a data type at runtime based on the variable's value at that time.\n  * Dynamic languages are usually interpreted (with some pre-processing for optimisation) so it is fast to make changes and then immediately run the updated program.\n  * Dynamically-Typed languages allows for Fast Development Cycles and Fast Start-up times.\n  * Some Examples of Dynamically Typed Languages are:- JavaScript, Python, Perl, Ruby, etc.\n- Statically-Typed Languages\n  * Statically-typed languages are the languages where variable types are known at compile time i.e. the type checking is done at compile time.\n  * Many runtime errors become compile time errors as the compiler ensures that you are writing 'correct' code. This leads to a much smoother development experience.\n  * The execution of the code will be faster compared to the dynamically-typed languages.\n  * The compiler can use the type system to provide language features that are more expressive and succinct.\n  * Some examples of Statically-Typed Languages are:- C++, Rust, C, Java, etc.\n- Rust is a Statically-Typed Language\n"
        },
        {
          "title": "Value Types",
          "shortTitle": "Value Types",
          "key": "value-types",
          "summary": "Rust has two major Data Value Types, which include \n  1. Scalar Types\n  2. Compound ypes\n",
          "details": "- Scalar Types\n  * A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.\n  - Integers\n    * An integer is a number without a fractional component.\n    * An integer can be of the following sizes:- 8-bit, 16-bit, 32-bit, 64-bit, 128-bit, arch.\n    * Integers can be either signed or unsigned. Signed and unsigned refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).\n    * Integers can be declared using keyword let, and explicitly defining the variable size and it's type of signed or unsigned integer.\n    * For example, we can declare a 64-bit signed and 32-bit unsigned integer in the following ways respectively :- \n    ```\n        1. let mut x: i64 = -20;\n        2. let mut x: u32 = 20;\n    ```\n    * The isize and usize types depend on the architecture of your build, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\n    * The number literals that can be multiple numeric types allow a type suffix, such as `20u32`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000` , which will have the same value as if you had specified `1000`.\n    - Integer Overflow\n      * Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur, which can result in one of two behaviors:- \n        1. When you’re compiling in `debug` mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs.\n        2. When you’re compiling in release mode with the `--release` flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping.\n  - Floating-Point Types\n    * Floating-Point Types are number with the decimal points.\n    * Floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively.\n    * All the Floating-Point Types are signed.\n    * The default Floating-Point Type is of 64-bit.\n    * The `f32` type is a single-precision float, and `f64` has double precision.\n    * We can declare a float type variable in the following ways:- \n     ```\n        fn main() {\n              let x = 2.0; // f64\n              let y: f32 = 3.0; // f32\n        }\n      ```\n  - Boolean Type\n    * There are two possible constant values:- True & False.\n    * Booleans are one byte in size.\n    * They are declared using the keyword 'bool'.\n  - Character Type\n    * Character Data Type doesn't use ASCII values like other programming languages but uses Unicode Scalar Value.\n    * It uses 4 bytes i.e. 32 bits of space for each character rather than 1 byte because of Unicode Scalar Values.\n    * We can use many more types of characters in rust, like, Chinese, emojis, etc.\n- Compound Data Types\n  * Compound types can group multiple values into one type. The two primitive compound types in rust are: Tuples and Arrays.\n  - Tuples\n    * A tuple is a general way of grouping together a number of values with a variety of types into one compound type.\n    * Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n    * Tuples are created by a comma seperated List.\n    * Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same.\n    * For Example:- \n      ```\n        fn main() {\n          let tup: (i32, f64, u8) = (500, 6.4, 1);\n        }\n      ```\n    * We can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access\n    * The tuple without any values has a special name knows as \"unit\".\n    * \"unit's\" value and its corresponding type are both written () and represent an empty value or an empty return type. \n    * Expressions implicitly return the unit value if they don’t return any other value. \n  - Arrays\n    * Arrays are a collection of multiple values, stored in a single entity.\n    * Unlike a tuple, every element of an array must have the same data type.\n    * Arrays in Rust have a fixed length, i.e. they are not dynamic in nature by default.\n    * Arrays are useful when you want your data allocated on the stack rather than the memory heap.\n    * For Example:- \n      ```\n        fn main() {\n            let a: [i32; 5] = [1, 2, 3, 4, 5];\n        }\n      ```\n      Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.\n    *  We can access elements of an array using indexing, like this:\n      ```\n        fn main() {\n            let a = [1, 2, 3, 4, 5];\n        \n            let first = a[0]; // outputs 1\n            let second = a[1]; // outputs 2\n        }\n      ```\n"
        },
        {
          "title": "Variables",
          "shortTitle": "Variables",
          "key": "variables",
          "summary": "Variables are used to store the values of a particular data type.",
          "details": "- Variables and Mutability\n  * In Rust, variables are immutable in nature by default.\n  * When a variable is immutable, once a value is bound to a name, you can’t change that value\n  * To make the variables mutable, we use the keyword:- `mut`.\n  * For Example:-\n    ```\n      fn main() {\n          let mut x = 5;\n          println!(\"The value of x is: {x}\");\n          x = 6;\n          println!(\"The value of x is: {x}\");\n      }\n    ```\n- Constants\n  * Constants are values that are bound to a name and are not allowed to change, i.e. they are also immutable.\n  * Usage of keyword `mut` isn't allowed with constants.\n  * Constants are immutable by default, and also they’re always immutable.\n  * We declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated.\n  * Constants can be declared in any scope, including the global scope, making them useful for values that many parts of code need to know about.\n  * Constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n  * For Example:-\n    ```\n      const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n    ```\n"
        },
        {
          "title": "Keywords",
          "shortTitle": "Keywords",
          "key": "keywords",
          "summary": "Keywords are predefined, reserved words used in programming that have special meanings to the compiler. Rust divides keywords into three categories:\n    1. Strict\n    2. Reserved \n    3. Weak\n",
          "details": "- Strict Keywords\n  * These keywords can only be used in their correct contexts. They cannot be used as the names of: Items, Variables and function parameters, etc.\n  * For Example:- ` mut, break, else, continue, return, impl, etc. ` \n- Reserved Variables\n  * These keywords aren't used yet, but they are reserved for future use. They have the same restrictions as strict keywords.\n  * For Example:- ` abstract, try, do, final, typeof, etc. `\n- Weak Keywords\n  * These keywords have special meaning only in certain contexts.\n  * For example, it is possible to declare a variable or method with the name `union`.\n"
        },
        {
          "title": "Bit Manipulation",
          "shortTitle": "Bit Manipulation",
          "key": "bit-manupilation",
          "summary": "Bit manipulation is the process of applying logical operations on a sequence of bits to achieve a required result.",
          "details": "- Bit Mnipulation is strictly done by rust compilers for storing data in variables, for two's compliment and many other purposes.\n"
        },
        {
          "title": "Strings",
          "shortTitle": "Strings",
          "key": "strings",
          "summary": "There are two types of strings in Rust: `String` and `&str`.",
          "details": "- String\n  * Strings are formed by a list of characters, which is really an \"array of characters\".\n  * A String is stored as a vector of bytes `(Vec<u8>)`.\n  * A String is made up of three components: a pointer to some bytes, a length, and a capacity.\n  * The pointer points to an internal buffer String uses to store its data.\n  * The length is the number of bytes currently stored in the buffer, and the capacity is the size of the buffer in bytes. As such, the length will always be less than or equal to the capacity.\n  * The buffer is always stored on the heap.\n  * It is guaranteed to always be a valid `UTF-8` sequence. \n  * String is heap allocated, growable and not null terminated.\n  * We can create a String from a literal string with `String::from`\n  * We can append a char to a String with the push method, and append a &str with the `push_str` method\n- &str\n  * The str type, also called a ‘string slice’, is the most primitive string type.\n  * A &str is made up of two components: a pointer to some bytes, and a length.\n  * `&str` is `(&[u8])` that always points to a valid UTF-8 sequence.\n  * It can be used to view into a String, just like `&[T]` is a view into `Vec<T>`.\n"
        },
        {
          "title": "Package Manager",
          "shortTitle": "Package Manager",
          "key": "package-manager",
          "summary": "- A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. \n",
          "details": "- Cargo is the Rust package manager.\n"
        }
      ]
    }
  ]
}